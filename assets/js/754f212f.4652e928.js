"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[586],{5851:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/merchant-api","title":"MerchantConnector","description":"How to utilize all MerchantConnector functionality.","source":"@site/versioned_docs/version-0.1.5/api-reference/merchant-connector.md","sourceDirName":"api-reference","slug":"/api-reference/merchant-api","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/merchant-api","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":6,"frontMatter":{"id":"merchant-api","sidebar_position":6,"title":"MerchantConnector","description":"How to utilize all MerchantConnector functionality.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"PrinterConnector","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/printer-api"},"next":{"title":"PaymentConnector","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/payment-api"}}');var i=r(4848),a=r(8453);const o={id:"merchant-api",sidebar_position:6,title:"MerchantConnector",description:"How to utilize all MerchantConnector functionality.",hide_title:!0},c=void 0,s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Class Overview",id:"class-overview",level:3},{value:"Initialization:",id:"initialization",level:3},{value:"Get Merchant",id:"get-merchant",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern::",id:"best-practice-with-repository-pattern",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h3,{id:"class-overview",children:"Class Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class MerchantConnector(context: Context)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"MerchantConnector"})," provides methods to interact with merchant data in the CorePOS system. The primary functionality includes retrieving merchant information through callbacks."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Manages merchant operations like retrieving merchant details."]}),"\n",(0,i.jsx)(n.h3,{id:"initialization",children:"Initialization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val merchantConnector = MerchantConnector(context)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-merchant",children:"Get Merchant"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Retrieves the current merchant\u2019s details from the CorePOS system."]}),"\n",(0,i.jsx)(n.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun getMerchant(): Merchant?\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsx)(n.p,{children:"None."}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Merchant?"}),": The inventory ",(0,i.jsx)(n.a,{href:"models/models-merchant#merchant",children:(0,i.jsx)(n.code,{children:"Merchant"})}),", or ",(0,i.jsx)(n.code,{children:"null"})," if the operation fails."]}),"\n",(0,i.jsx)(n.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"null"})," on error."]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class MainActivity : AppCompatActivity() {\r\n    private lateinit var merchantConnector: MerchantConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        \r\n        merchantConnector = MerchantConnector(this)\r\n        \r\n        // Get merchant info in background thread\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                val merchant = merchantConnector.getMerchant()\r\n                merchant?.let {\r\n                    Log.d("CorePOS", "Store: ${it.name}")\r\n                    Log.d("CorePOS", "Address: ${it.address1}")\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to get merchant: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern::"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"interface MerchantRepository {\r\n    suspend fun getMerchant(): Merchant?\r\n}\r\n\r\nclass MerchantRepositoryImpl(\r\n    private val merchantConnector: MerchantConnector\r\n) : MerchantRepository {\r\n    override suspend fun getMerchant(): Merchant? =\r\n        try { merchantConnector.getMerchant() } \r\n        catch (_: Exception) { null }\r\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);