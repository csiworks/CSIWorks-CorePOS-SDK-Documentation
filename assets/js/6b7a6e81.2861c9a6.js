"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[9641],{8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var a=n(6540);const t={},o=a.createContext(t);function i(e){const r=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:r},e.children)}},9708:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-save-charge","title":"Save Charge","description":"Creates a new charge or updates an existing one.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/save-charge.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-save-charge","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-save-charge","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":9,"frontMatter":{"id":"inventory-api-save-charge","sidebar_position":9,"title":"Save Charge","description":"Creates a new charge or updates an existing one.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Get Charges","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-charges"},"next":{"title":"Delete Charge","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-delete-charge"}}');var t=n(4848),o=n(8453);const i={id:"inventory-api-save-charge",sidebar_position:9,title:"Save Charge",description:"Creates a new charge or updates an existing one.",hide_title:!0},s=void 0,c={},l=[{value:"Save Charge",id:"save-charge",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function h(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"save-charge",children:"Save Charge"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Purpose:"})," Persist charge (tax/fee) data to the system."]}),"\n",(0,t.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"fun saveCharge(charge: Charge): Charge?\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"charge"}),": ",(0,t.jsx)(r.a,{href:"../models/models-inventory#charge",children:(0,t.jsx)(r.code,{children:"Charge"})})," object to save."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Charge?"}),": The saved ",(0,t.jsx)(r.a,{href:"../models/models-inventory#charge",children:(0,t.jsx)(r.code,{children:"Charge"})})," with updated data (including generated ID for new charges), or ",(0,t.jsx)(r.code,{children:"null"})," if the operation fails."]}),"\n",(0,t.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,t.jsxs)(r.p,{children:["Returns ",(0,t.jsx)(r.code,{children:"null"})," on error."]}),"\n",(0,t.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'private fun createNewCharge(chargeName: String, amount: Long, amountType: AmountType) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        val newCharge = Charge(\r\n            chargeId = null,\r\n            name = chargeName,\r\n            chargeAmountType = amountType.code,\r\n            amount = amount,\r\n            isDefault = false\r\n        )\r\n        \r\n        try {\r\n            val savedCharge = inventoryConnector.saveCharge(newCharge)\r\n            savedCharge?.let {\r\n                withContext(Dispatchers.Main) {\r\n                    showChargeCreated(it)\r\n                    refreshChargesList()\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to save charge: ${e.message}")\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun saveCharge(charge: Charge): Charge?\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun saveCharge(charge: Charge): Charge? {\r\n        return try {\r\n            inventoryConnector.saveCharge(charge)\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to save charge: ${e.message}")\r\n            null\r\n        }\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);