"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5629],{7871:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"api-reference/order-connector/order-api-add-fixed-price-line-items","title":"Add Fixed-Price Line Items","description":"Add multiple fixed-price line items to an order in a single operation.","source":"@site/versioned_docs/version-0.1.5/api-reference/order-connector/add-fixed-price-line-items.md","sourceDirName":"api-reference/order-connector","slug":"/api-reference/order-connector/order-api-add-fixed-price-line-items","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-add-fixed-price-line-items","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":6,"frontMatter":{"id":"order-api-add-fixed-price-line-items","sidebar_position":6,"title":"Add Fixed-Price Line Items","description":"Add multiple fixed-price line items to an order in a single operation.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Add Per-Unit Line Item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-add-per-unit-line-item"},"next":{"title":"Delete Line Item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-delete-line-item"}}');var t=i(4848),d=i(8453);const o={id:"order-api-add-fixed-price-line-items",sidebar_position:6,title:"Add Fixed-Price Line Items",description:"Add multiple fixed-price line items to an order in a single operation.",hide_title:!0},s=void 0,l={},a=[{value:"Add Fixed-Price Line Items",id:"add-fixed-price-line-items",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern::",id:"best-practice-with-repository-pattern",level:3}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"add-fixed-price-line-items",children:"Add Fixed-Price Line Items"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Purpose:"})," Add multiple fixed-price line items to an order in a single operation."]}),"\n",(0,t.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"fun addFixedPriceLineItems(\r\n    orderId: String,\r\n    itemId: String,\r\n    itemsNumber: Int,\r\n    devNotes: Map<String, String>?,\r\n    binName: String?\r\n): List<LineItem>?\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"orderId"})," (String): Unique ",(0,t.jsx)(r.strong,{children:"UUID"})," identifier of the ",(0,t.jsx)(r.a,{href:"../models/models-order#order",children:(0,t.jsx)(r.code,{children:"Order"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"itemId"})," (String): Unique ",(0,t.jsx)(r.strong,{children:"UUID"})," identifier of the ",(0,t.jsx)(r.a,{href:"../models/models-inventory#item",children:(0,t.jsx)(r.code,{children:"Item"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"itemsNumber"})," (Int): Number of line items to add for this item."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"devNotes"})," (Map(String, String)?): Optional development notes as key-value pairs."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"binName"})," (String?): Optional, A specific identifier for categorizing items in an order. This is the general name of a specific group of items, united by some logic."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,t.jsxs)(r.p,{children:["List(",(0,t.jsx)(r.a,{href:"../models/models-order#lineitem",children:(0,t.jsx)(r.code,{children:"LineItem"})}),")? - Returns the list of created line items or null if the operation fails."]}),"\n",(0,t.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,t.jsx)(r.p,{children:"Triggers error callback on failure."}),"\n",(0,t.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"private fun addBulkFixedPriceItems(orderId: String, itemId: String, itemsNumber: Int, devNotes: Map<String, String>? = null, binName: String? = null) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        val lineItems = orderConnector.addFixedPriceLineItems(orderId, itemId, itemsNumber, devNotes, binName)\r\n        lineItems?.let {\r\n            val updated = orderConnector.getOrder(orderId)\r\n            withContext(Dispatchers.Main) {\r\n                updateOrderUI(updated)\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern::"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"interface OrderRepository {\r\n    fun addFixedPriceLineItems(orderId: String, itemId: String, itemsNumber: Int, devNotes: Map<String, String>?, binName: String?): List<LineItem>?\r\n}\r\n\r\nclass OrderRepositoryImpl(\r\n    private val orderConnector: OrderConnector\r\n) : OrderRepository {\r\n    override suspend fun addFixedPriceLineItems(orderId: String, itemId: String, itemsNumber: Int, devNotes: Map<String, String>?, binName: String?): List<LineItem>? {\r\n        return try {\r\n            orderConnector.addFixedPriceLineItems(orderId, itemId, itemsNumber, devNotes, binName)\r\n        } catch (_: Exception) { null }\r\n    }\r\n}\n"})})]})}function m(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>o,x:()=>s});var n=i(6540);const t={},d=n.createContext(t);function o(e){const r=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(d.Provider,{value:r},e.children)}}}]);