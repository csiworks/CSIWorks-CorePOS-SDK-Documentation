"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5467],{6380:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api-reference/models/models-inventory","title":"Inventory","description":"Inventory models.","source":"@site/versioned_docs/version-0.1.5/api-reference/models/inventory.md","sourceDirName":"api-reference/models","slug":"/api-reference/models/models-inventory","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-inventory","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":1,"frontMatter":{"id":"models-inventory","sidebar_position":1,"title":"Inventory","description":"Inventory models.","pagination_prev":null,"hide_title":true},"sidebar":"tutorialSidebar","next":{"title":"Merchant","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-merchant"}}');var r=i(4848),l=i(8453);const t={id:"models-inventory",sidebar_position:1,title:"Inventory",description:"Inventory models.",pagination_prev:null,hide_title:!0},c=void 0,d={},a=[{value:"Inventory Models",id:"inventory-models",level:2},{value:"Category",id:"category",level:2},{value:"Values",id:"values",level:3},{value:"Charge",id:"charge",level:2},{value:"Values",id:"values-1",level:3},{value:"Public Functions",id:"public-functions",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Discount",id:"discount",level:2},{value:"Values",id:"values-2",level:3},{value:"Item",id:"item",level:2},{value:"Values",id:"values-3",level:3},{value:"Important clarification",id:"important-clarification",level:4},{value:"Public Functions",id:"public-functions-1",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"PriceType Enum",id:"pricetype-enum",level:2},{value:"Values",id:"values-4",level:3},{value:"Static Functions",id:"static-functions",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"AmountType Enum",id:"amounttype-enum",level:2},{value:"Values",id:"values-5",level:3},{value:"Static Functions",id:"static-functions-1",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"EbtFlag",id:"ebtflag",level:2},{value:"Values",id:"values-6",level:3},{value:"Static  Functions",id:"static--functions",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"ItemFilter",id:"itemfilter",level:2},{value:"Values",id:"values-7",level:3}];function o(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"inventory-models",children:"Inventory Models"}),"\n",(0,r.jsx)(n.p,{children:"This section covers all inventory models (entities) used in the API"}),"\n",(0,r.jsx)(n.h2,{id:"category",children:"Category"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"data class Category\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Category"})," model represents a category in the inventory, containing the following fields:"]}),"\n",(0,r.jsx)(n.h3,{id:"values",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"categoryId"}),": A unique ",(0,r.jsx)(n.strong,{children:"UUID"})," identifier for the category."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": The name of the category."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"charge",children:"Charge"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"data class Charge\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Charge"})," model represents taxes and fees associated with inventory items, containing the following fields:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-1",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"chargeId"}),": A unique ",(0,r.jsx)(n.strong,{children:"UUID"})," identifier for the charge."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),': The name of the charge (e.g., "Sales Tax", "Shipping Fee").']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"chargeAmountType"}),": The type of charge amount. Can be ",(0,r.jsx)(n.code,{children:"FIXED (0)"})," or ",(0,r.jsx)(n.code,{children:"PERCENTAGE (1)"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FIXED"}),", Represents a fixed amount, such as a flat fee."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PERCENTAGE"}),", Represents a percentage, such as a tax rate."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"amount"}),": The amount of the charge.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the type is ",(0,r.jsx)(n.strong,{children:"FIXED"}),", it's a specific amount."]}),"\n",(0,r.jsxs)(n.li,{children:["If it's ",(0,r.jsx)(n.strong,{children:"PERCENTAGE"}),", it represents the percentage value."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isDefault"}),": A flag indicating whether this charge is the default charge."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"public-functions",children:"Public Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun getAmountType(): AmountType?\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the AmountType enum value corresponding to the chargeAmountType field."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"None"})}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"AmountType?"})," - The ",(0,r.jsx)(n.a,{href:"#amounttype-enum",children:(0,r.jsx)(n.strong,{children:"AmountType"})})," enum value (FIXED or PERCENTAGE) based on chargeAmountType, or null if invalid"]}),"\n",(0,r.jsx)(n.h2,{id:"discount",children:"Discount"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"data class Discount\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Discount"})," model represents a discount applied to items in the inventory, containing the following fields:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-2",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discountId"}),": A unique ",(0,r.jsx)(n.strong,{children:"UUID"})," identifier for the discount."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),': The name of the discount (e.g., "Holiday Sale").']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discountType"}),": The type of discount. Can be ",(0,r.jsx)(n.code,{children:"FIXED (0)"})," or ",(0,r.jsx)(n.code,{children:"PERCENTAGE (1)"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FIXED"}),", Represents a fixed amount discount."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PERCENTAGE"}),", Represents a percentage discount."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"amount"}),": The discount amount."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isActive"}),": A flag indicating whether the discount is currently active."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"item",children:"Item"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"data class Item\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Item"})," model represents an inventory item, containing the following fields:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-3",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemId"}),": A unique ",(0,r.jsx)(n.strong,{children:"UUID"})," identifier for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": The name of the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"imagePath"}),": A path to the item's image."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"thumbnailPath"}),": A path to the item's thumbnail image."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unitCash"}),": The cash price for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unitCard"}),": The card price for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"priceType"}),": ",(0,r.jsx)(n.a,{href:"#pricetype-enum",children:(0,r.jsx)(n.strong,{children:"PriceType"})}),", the type of pricing for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unitType"}),": The unit type of the item. Can be: ",(0,r.jsx)(n.code,{children:"Lb (Lb)"}),", ",(0,r.jsx)(n.code,{children:"Oz (Oz)"}),", ",(0,r.jsx)(n.code,{children:"Kg (Kg)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"charges"}),": A list of ",(0,r.jsx)(n.a,{href:"#charge",children:(0,r.jsx)(n.strong,{children:"Charge"})}),", a list of charges associated with the item (e.g., taxes or fees)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"categories"}),": A list of ",(0,r.jsx)(n.a,{href:"#category",children:(0,r.jsx)(n.strong,{children:"Category"})}),", a list of categories the item belongs to."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"productCode"}),": The product code for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemCost"}),": The cost of the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quantity"}),": The available stock quantity of the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"trackInventory"}),": A flag indicating whether inventory tracking is enabled for this item.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Allows the item quantity to update dynamically when sales occur."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dualPricingBasePriceType"}),": The base price type for dual pricing. Can be: ",(0,r.jsx)(n.code,{children:"CASH (0)"}),", ",(0,r.jsx)(n.code,{children:"CARD (1)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isEBT"}),": A flag indicating whether the item is eligible for Electronic Benefit Transfer (EBT)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isAvailable"}),": A flag indicating whether the item is available."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Dual pricing introduction",type:"info",children:[(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"dualPricingBasePriceType"})," = 0 (",(0,r.jsx)(n.strong,{children:"CASH"}),"), then the base price is the ",(0,r.jsx)(n.strong,{children:"cash price"}),", and the ",(0,r.jsx)(n.strong,{children:"card"})," price is based on the CASH price with ",(0,r.jsx)(n.strong,{children:"dualPricing"}),(0,r.jsx)(n.br,{}),"\n","Else if ",(0,r.jsx)(n.code,{children:"dualPricingBasePriceType"})," = 1 (",(0,r.jsx)(n.strong,{children:"CARD"}),"), then the base price is the ",(0,r.jsx)(n.strong,{children:"card price"}),", and the ",(0,r.jsx)(n.strong,{children:"cash"})," price is based on the CARD price with ",(0,r.jsx)(n.strong,{children:"dualPricing"})]}),(0,r.jsx)(n.h4,{id:"important-clarification",children:"Important clarification"}),(0,r.jsxs)(n.p,{children:["The base price remains ",(0,r.jsx)(n.strong,{children:"unchanged"}),", when the ",(0,r.jsx)(n.code,{children:"dualPricing"})," rate is updated",(0,r.jsx)(n.br,{}),"\n","Only its counterpart price will change, depending on which price type is set as the base"]}),(0,r.jsxs)(n.p,{children:["This means the item behaves as follows when ",(0,r.jsx)(n.code,{children:"dualPricing"})," changes"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the base price = CASH \u2192 only the CARD price is updated"}),"\n",(0,r.jsx)(n.li,{children:"If the base price = CARD \u2192 only the CASH price is updated"}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"public-functions-1",children:"Public Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun getPriceType(): PriceType?\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the PriceType enum value corresponding to the priceType field."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"None"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"PriceType?"})," - The ",(0,r.jsx)(n.a,{href:"#pricetype-enum",children:(0,r.jsx)(n.strong,{children:"PriceType"})})," enum value (FIXED, VARIABLE, or PER_UNIT) based on priceType, or null if invalid"]}),"\n",(0,r.jsx)(n.h2,{id:"pricetype-enum",children:"PriceType Enum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"enum class PriceType\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PriceType"})," enum defines the different types of pricing available for items:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-4",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FIXED (0)"}),": A fixed price for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"VARIABLE (1)"}),": A variable price for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PER_UNIT (2)"}),": Price per unit of the item."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"static-functions",children:"Static Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"infix fun from(code: Int): PriceType?\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the PriceType enum value corresponding to the provided code."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"code: Int"})," - The integer code representing the price type"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"PriceType?"})," - The corresponding PriceType enum value, or null if the code is invalid"]}),"\n",(0,r.jsx)(n.h2,{id:"amounttype-enum",children:"AmountType Enum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"enum class AmountType\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"AmountType"})," enum defines the different types of charge amounts:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-5",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FIXED (0)"}),": A fixed amount charge, such as a flat fee."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PERCENTAGE (1)"}),": A percentage-based charge, such as a tax rate."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"static-functions-1",children:"Static Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"infix fun from(code: Int): AmountType?\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the AmountType enum value corresponding to the provided code."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"code: Int"})," - The integer code representing the amount type"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"AmountType?"})," - The corresponding AmountType enum value, or null if the code is invalid"]}),"\n",(0,r.jsx)(n.h2,{id:"ebtflag",children:"EbtFlag"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"data class EbtFlag\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"EbtFlag"})," model represents EBT (Electronic Benefit Transfer) eligibility status for an inventory item, containing the following fields:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-6",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemId"}),": A unique ",(0,r.jsx)(n.strong,{children:"UUID"})," identifier for the item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isEbt"}),": A flag indicating whether the item is eligible for EBT."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"static--functions",children:"Static  Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun mapToList(flagsMap: Map<String, Boolean>): List<EbtFlag>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Converts a map of item IDs and EBT flags to a list of EbtFlag objects."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"flagsMap: Map<String, Boolean>"})," - A map where keys are item IDs and values are EBT eligibility flags"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<EbtFlag>"})," - A list of EbtFlag objects created from the input map"]}),"\n",(0,r.jsx)(n.h2,{id:"itemfilter",children:"ItemFilter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"data class ItemFilter\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ItemFilter"})," model is used to filter items when retrieving a list from the inventory. It contains the following fields:"]}),"\n",(0,r.jsx)(n.h3,{id:"values-7",children:"Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nameQuery"}),": Filter items by name containing this query (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"categoryId"}),": Filter by a specific category ",(0,r.jsx)(n.strong,{children:"UUID"})," (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"withoutCategory"}),": If true, includes only items without a category"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filterByEbt"}),": Filter items by EBT eligibility status (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"productCode"}),": Filter items by product code (optional)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);