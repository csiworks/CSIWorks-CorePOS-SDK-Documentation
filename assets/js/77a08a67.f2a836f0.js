"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[1718],{7835:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-get-dual-price-rate","title":"Get Dual Price Rate","description":"Retrieves the current dual pricing rate.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/get-dual-price-rate.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-get-dual-price-rate","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-dual-price-rate","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":14,"frontMatter":{"id":"inventory-api-get-dual-price-rate","sidebar_position":14,"title":"Get Dual Price Rate","description":"Retrieves the current dual pricing rate.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Update Item Stock Quantity","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-update-item-stock-quantity"},"next":{"title":"OrderConnector","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/order-connector"}}');var i=n(4848),a=n(8453);const o={id:"inventory-api-get-dual-price-rate",sidebar_position:14,title:"Get Dual Price Rate",description:"Retrieves the current dual pricing rate.",hide_title:!0},c=void 0,l={},s=[{value:"Get Dual Price Rate",id:"get-dual-price-rate",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function d(e){const r={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"get-dual-price-rate",children:"Get Dual Price Rate"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Purpose:"})," Fetch the current dual pricing rate used for calculating card vs cash pricing."]}),"\n",(0,i.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"fun getDualPriceRate(): Float?\n"})}),"\n",(0,i.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsx)(r.p,{children:"None"}),"\n",(0,i.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"Float?"}),": The current dual pricing rate as a decimal (e.g., 3.5 for 3.5%), or ",(0,i.jsx)(r.code,{children:"null"})," if the operation fails."]}),"\n",(0,i.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsxs)(r.p,{children:["Returns ",(0,i.jsx)(r.code,{children:"null"})," on error."]}),"\n",(0,i.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'private fun loadDualPriceRate() {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        try {\r\n            val rate = inventoryConnector.getDualPriceRate()\r\n            rate?.let {\r\n                withContext(Dispatchers.Main) {\r\n                    displayDualPriceRate(it)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to load dual price rate: ${e.message}")\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun displayDualPriceRate(rate: Float) {\r\n    val percentage = rate\r\n    textView.text = "Dual Price Rate: ${String.format("%.2f", percentage)}%"\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun getDualPriceRate(): Float?\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun getDualPriceRate(): Float? {\r\n        return try {\r\n            inventoryConnector.getDualPriceRate()\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get dual price rate: ${e.message}")\r\n            null\r\n        }\r\n    }\r\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var t=n(6540);const i={},a=t.createContext(i);function o(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);