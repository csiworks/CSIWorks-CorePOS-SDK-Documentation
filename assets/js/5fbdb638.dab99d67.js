"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5605],{2964:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"quick-start/quick-guide-examples","title":"Quick Examples","description":"Code snippets using the SDK","source":"@site/versioned_docs/version-0.1.5/quick-start/quick-examples.md","sourceDirName":"quick-start","slug":"/quick-start/quick-guide-examples","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/quick-start/quick-guide-examples","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":2,"frontMatter":{"id":"quick-guide-examples","sidebar_position":2,"title":"Quick Examples","description":"Code snippets using the SDK","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/quick-start/quick-guide-core-concepts"},"next":{"title":"Api Reference","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference"}}');var i=r(4848),a=r(8453);const o={id:"quick-guide-examples",sidebar_position:2,title:"Quick Examples",description:"Code snippets using the SDK",hide_title:!0},c=void 0,s={},d=[{value:"Quick Examples",id:"quick-examples",level:2},{value:"Get Merchant Information",id:"get-merchant-information",level:3},{value:"Retrieve Inventory Items",id:"retrieve-inventory-items",level:3},{value:"Manage Orders",id:"manage-orders",level:3},{value:"Handle Payments",id:"handle-payments",level:3},{value:"Print Receipts",id:"print-receipts",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"quick-examples",children:"Quick Examples"}),"\n",(0,i.jsx)(n.p,{children:"A collection of code snippets demonstrating common tasks using the CorePOS SDK."}),"\n",(0,i.jsx)(n.h3,{id:"get-merchant-information",children:"Get Merchant Information"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class MainActivity : AppCompatActivity() {\r\n    private lateinit var merchantConnector: MerchantConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        \r\n        merchantConnector = MerchantConnector(this)\r\n        \r\n        // Get merchant info in background thread\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                val merchant = merchantConnector.getMerchant()\r\n                merchant?.let {\r\n                    Log.d("CorePOS", "Store: ${it.name}")\r\n                    Log.d("CorePOS", "Address: ${it.address1}")\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to get merchant: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"retrieve-inventory-items",children:"Retrieve Inventory Items"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class InventoryActivity : AppCompatActivity() {\r\n    private lateinit var inventoryConnector: InventoryConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_inventory)\r\n        \r\n        inventoryConnector = InventoryConnector(this)\r\n        loadItems()\r\n    }\r\n    \r\n    private fun loadItems() {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                // Get all items\r\n                val items = inventoryConnector.getItems()\r\n                \r\n                // Or filter by category\r\n                val filter = ItemFilter(categoryId = "electronics")\r\n                val filteredItems = inventoryConnector.getItems(filter)\r\n                \r\n                // Update UI on main thread\r\n                withContext(Dispatchers.Main) {\r\n                    updateItemList(items ?: emptyList())\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to load items: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"manage-orders",children:"Manage Orders"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class OrderActivity : AppCompatActivity() {\r\n    private lateinit var orderConnector: OrderConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_order)\r\n        \r\n        orderConnector = OrderConnector(this)\r\n        loadActiveOrder()\r\n    }\r\n    \r\n    private fun loadActiveOrder() {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                val order = orderConnector.getActiveOrder()\r\n                withContext(Dispatchers.Main) {\r\n                    displayOrder(order)\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to load order: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n    \r\n    fun addItemToOrder(itemId: String, quantity: Double) {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                val activeOrder = orderConnector.getActiveOrder()\r\n                activeOrder?.let { order ->\r\n                    val lineItem = orderConnector.addPerUnitLineItem(\r\n                        orderId = order.orderId!!,\r\n                        itemId = itemId,\r\n                        quantity = quantity,\r\n                        devNotes = null\r\n                    )\r\n                    \r\n                    withContext(Dispatchers.Main) {\r\n                        onItemAdded(lineItem)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to add item: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"handle-payments",children:"Handle Payments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class PaymentActivity : AppCompatActivity() {\r\n    private lateinit var tenderConnector: TenderConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_payment)\r\n        \r\n        tenderConnector = TenderConnector(this)\r\n        loadPaymentMethods()\r\n    }\r\n    \r\n    private fun loadPaymentMethods() {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                val tenders = tenderConnector.getTenders(packageName)\r\n                withContext(Dispatchers.Main) {\r\n                    displayPaymentMethods(tenders ?: emptyList())\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to load payment methods: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n    \r\n    fun createPaymentMethod(\r\n        buttonTitle: String,\r\n        tenderName: String,\r\n        enabled: Boolean = true\r\n    ) {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                val tender = tenderConnector.createTender(\r\n                    buttonTitle = buttonTitle,\r\n                    tenderName = tenderName,\r\n                    packageName = packageName,\r\n                    enabled = enabled,\r\n                    openCashDrawer = false\r\n                )\r\n                \r\n                withContext(Dispatchers.Main) {\r\n                    onPaymentMethodCreated(tender)\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to create payment method: ${e.message}")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"print-receipts",children:"Print Receipts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class ReceiptActivity : AppCompatActivity() {\r\n    private lateinit var printerConnector: PrinterConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_receipt)\r\n        \r\n        printerConnector = PrinterConnector(this)\r\n    }\r\n    \r\n    fun printReceipt(bitmap: Bitmap) {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                printerConnector.printBitmap(bitmap)\r\n                withContext(Dispatchers.Main) {\r\n                    showPrintSuccess()\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to print: ${e.message}")\r\n                withContext(Dispatchers.Main) {\r\n                    showPrintError(e.message)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);