"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[4205],{5452:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api-reference/order-connector/order-api-delete-line-items","title":"Delete Line Items","description":"Remove multiple line items from an order in a single operation.","source":"@site/versioned_docs/version-0.1.5/api-reference/order-connector/delete-line-items.md","sourceDirName":"api-reference/order-connector","slug":"/api-reference/order-connector/order-api-delete-line-items","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-delete-line-items","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":7,"frontMatter":{"id":"order-api-delete-line-items","sidebar_position":7,"title":"Delete Line Items","description":"Remove multiple line items from an order in a single operation.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Add Line Item Discount","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-add-line-item-discount"},"next":{"title":"Delete Line Item Discount","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-delete-line-item-discount"}}');var t=n(4848),o=n(8453);const s={id:"order-api-delete-line-items",sidebar_position:7,title:"Delete Line Items",description:"Remove multiple line items from an order in a single operation.",hide_title:!0},d=void 0,l={},a=[{value:"Delete Line Items",id:"delete-line-items",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern::",id:"best-practice-with-repository-pattern",level:3}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"delete-line-items",children:"Delete Line Items"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Purpose:"})," Remove multiple line items from an order in a single operation."]}),"\n",(0,t.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"fun deleteLineItems(orderId: String, lineItemIds: List<String>)\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"orderId"})," (String): Unique ",(0,t.jsx)(r.strong,{children:"UUID"})," identifier of the ",(0,t.jsx)(r.a,{href:"../models/models-order#order",children:(0,t.jsx)(r.code,{children:"Order"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"lineItemIds"})," (List(String)): List of unique ",(0,t.jsx)(r.strong,{children:"UUID"})," identifiers of the ",(0,t.jsx)(r.a,{href:"../models/models-order#lineitem",children:(0,t.jsx)(r.code,{children:"LineItem"})})," objects to remove."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,t.jsx)(r.p,{children:"Void (Unit) No return value is provided. The operation is asynchronous, and a callback is triggered to indicate success or failure."}),"\n",(0,t.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,t.jsx)(r.p,{children:"Triggers error callback on failure."}),"\n",(0,t.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"private fun removeMultipleItems(orderId: String, itemsToRemove: List<String>) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        orderConnector.deleteLineItems(orderId, itemsToRemove)\r\n        val updated = orderConnector.getOrder(orderId)\r\n        withContext(Dispatchers.Main) {\r\n            updateOrderUI(updated)\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern::"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"interface OrderRepository {\r\n    fun deleteLineItems(orderId: String, lineItemIds: List<String>)\r\n}\r\n\r\nclass OrderRepositoryImpl(\r\n    private val orderConnector: OrderConnector\r\n) : OrderRepository {\r\n    override suspend fun deleteLineItems(orderId: String, lineItemIds: List<String>): Boolean {\r\n        return try {\r\n            orderConnector.deleteLineItems(orderId, lineItemIds)\r\n            true\r\n        } catch (_: Exception) { false }\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var i=n(6540);const t={},o=i.createContext(t);function s(e){const r=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);