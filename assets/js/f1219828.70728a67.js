"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[7602],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},8828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api-reference/tender-connector/tender-api-introduction","title":"Introduction","description":"Introduction to TenderConnector.","source":"@site/versioned_docs/version-0.1.5/api-reference/tender-connector/intro.md","sourceDirName":"api-reference/tender-connector","slug":"/api-reference/tender-connector/tender-api-introduction","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/tender-connector/tender-api-introduction","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":1,"frontMatter":{"id":"tender-api-introduction","sidebar_position":1,"title":"Introduction","description":"Introduction to TenderConnector.","hide_title":true,"pagination_prev":null},"sidebar":"tutorialSidebar","next":{"title":"Create Tender","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/tender-connector/tender-api-create-tender"}}');var i=t(4848),o=t(8453);const s={id:"tender-api-introduction",sidebar_position:1,title:"Introduction",description:"Introduction to TenderConnector.",hide_title:!0,pagination_prev:null},d=void 0,c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"At a Glance",id:"at-a-glance",level:4},{value:"Integration Steps",id:"integration-steps",level:3},{value:"Implement a Payment Activity",id:"implement-a-payment-activity",level:4},{value:"Return Results to CorePOS",id:"return-results-to-corepos",level:4},{value:"Required:",id:"required",level:5},{value:"Optional:",id:"optional",level:5},{value:"Creating the Tender Button in CorePOS",id:"creating-the-tender-button-in-corepos",level:4},{value:"API Reference",id:"api-reference",level:4},{value:"TenderConnector Methods:",id:"tenderconnector-methods",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h4,{id:"at-a-glance",children:"At a Glance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What it is:"})," A way to add a custom tender button to the CorePOS checkout screen that launches your app to process a payment."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use cases:"})," EBT flows, external gateway integrations, loyalty/redemption, or any bespoke tender not covered by built\u2011in methods."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"How it works:"})," CorePOS calls your app via an intent; your app triggers payment processing with parameters provided by your app in extras\r\nand returns a result with required extras. CorePOS then records the payment appropriately."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Keep your payment Activity lightweight. Do SDK call on background threads and return promptly to avoid ANRs."})}),"\n",(0,i.jsx)(n.h3,{id:"integration-steps",children:"Integration Steps"}),"\n",(0,i.jsx)(n.h4,{id:"implement-a-payment-activity",children:"Implement a Payment Activity"}),"\n",(0,i.jsxs)(n.p,{children:["Create an Activity that will be launched by CorePOS to handle the payment. Register it in ",(0,i.jsx)(n.strong,{children:"AndroidManifest.xml"})," with the required intent filter:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<activity\r\n    android:name=".YourPaymentActivity"\r\n    android:exported="true">\r\n    <intent-filter>\r\n        <action android:name="com.corepos.intent.action.MERCHANT_TENDER" />\r\n        <category android:name="android.intent.category.DEFAULT" />\r\n    </intent-filter>\r\n</activity>\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'android:exported="true"'})," is required on Android 12+ for Activities with intent filters."]})}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"YourPaymentActivity"}),", read the incoming extras from the launch intent, run your payment flow, and then return an ",(0,i.jsx)(n.strong,{children:"Activity result"})," with the appropriate response extras."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Incoming extras (from CorePOS to your app)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_CASH_AMOUNT"}),"(Long) \u2014 Total cash amount in the smallest currency unit (e.g., cents)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_CARD_AMOUNT"}),"(Long) \u2014 Total card amount in the smallest currency unit (e.g., cents)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_CASH_TAX_AMOUNT"}),"(Long) \u2014 Portion of the amount that is cash tax, in smallest unit."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_CARD_TAX_AMOUNT"}),"(Long) \u2014 Portion of the amount that is card tax, in smallest unit."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_ORDER_ID"}),"(String) \u2014 CorePOS order ",(0,i.jsx)(n.strong,{children:"UUID"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_TENDER"}),"(Tender) \u2014 The ",(0,i.jsx)(n.a,{href:"../models/models-tender#tender",children:(0,i.jsx)(n.code,{children:"Tender"})})," record configured in CorePOS."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_NOTE"}),"(String, optional) \u2014\tOptional order notes."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"return-results-to-corepos",children:"Return Results to CorePOS"}),"\n",(0,i.jsxs)(n.p,{children:["After executing your specific logic, finish your Activity with a result intent. CorePOS will then continue processing the payment. If successful, include the required and optional extras shown below. If cancelled or failed, return ",(0,i.jsx)(n.code,{children:"RESULT_CANCELED"})," and (optionally) an error code/message."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Outgoing extras (from your app back to CorePOS)"})}),"\n",(0,i.jsx)(n.h5,{id:"required",children:"Required:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_AMOUNT"}),"(Long) \u2014 Final amount in the smallest unit."]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"optional",children:"Optional:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_TENDER_TYPE"}),"(TenderType, enum) \u2014 Specify a concrete ",(0,i.jsx)(n.a,{href:"../models/models-tender#tendertype",children:(0,i.jsx)(n.code,{children:"TenderType"})})," (e.g., EBT).","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If omitted, CorePOS records it as a Custom Tender."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_CLIENT_ID"}),"(String) \u2014 Unique ID from your system (e.g., a payment or transaction ID)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_NOTE"}),"(String) \u2014 Notes about the payment."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_TIP_AMOUNT"}),"(Long) \u2014 Tip in smallest unit."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Intents.EXTRA_LINE_ITEM_IDS"}),"(List(String)) \u2014 List of line item UUIDs."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val resultIntent = Intent().apply {\r\n    // Required\r\n    putExtra(Intents.EXTRA_AMOUNT, amountApproved)\r\n\r\n    // Optional\r\n    putExtra(Intents.EXTRA_TENDER_TYPE, TenderType.EBT)\r\n    putExtra(Intents.EXTRA_CLIENT_ID, UUID.randomUUID().toString())\r\n    putExtra(Intents.EXTRA_NOTE, "Processed via custom tender")\r\n    putExtra(Intents.EXTRA_TIP_AMOUNT, tipAmount)\r\n}\r\nsetResult(Activity.RESULT_OK, resultIntent)\r\nfinish()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cancelled example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"setResult(Activity.RESULT_CANCELED, Intent())\r\nfinish()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"(Optional) Failure with reason:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val error = Intent().apply {\r\n    putExtra(Intents.EXTRA_ERROR_CODE, "DECLINED")\r\n    putExtra(Intents.EXTRA_ERROR_MESSAGE, "Issuer declined")\r\n}\r\nsetResult(Activity.RESULT_CANCELED, error)\r\nfinish()\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Recomended",type:"tip",children:(0,i.jsx)(n.p,{children:"Standardise your error codes/messages so merchants and support can quickly diagnose issues"})}),"\n",(0,i.jsx)(n.h4,{id:"creating-the-tender-button-in-corepos",children:"Creating the Tender Button in CorePOS"}),"\n",(0,i.jsxs)(n.p,{children:["Once your app is ready, create a corresponding ",(0,i.jsx)(n.a,{href:"../models/models-tender#tender",children:(0,i.jsx)(n.code,{children:"Tender"})})," in CorePOS using the SDK. This exposes a button on the checkout screen that launches your Activity."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val tenderConnector = TenderConnector(context)\r\n\r\nval tender = tenderConnector.createTender(\r\n    buttonTitle = "EBT",\r\n    tenderName = "External EBT",\r\n    packageName = "com.example.partnerapp",\r\n    enabled = true,\r\n    openCashDrawer = false\r\n)\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"packageName"})," must match your Android application ID that contains ",(0,i.jsx)(n.code,{children:"YourPaymentActivity"}),"."]})}),"\n",(0,i.jsx)(n.h4,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class TenderConnector(context: Context) : ServiceConnector<ITenderService>(context) {\r\n    override fun getServiceInterface(iBinder: IBinder?): ITenderService\r\n\r\n    fun createTender(\r\n        buttonTitle: String,\r\n        tenderName: String,\r\n        packageName: String,\r\n        enabled: Boolean,\r\n        openCashDrawer: Boolean,\r\n    ): Tender?\r\n\r\n    fun getTenders(packageName: String): List<Tender>?\r\n\r\n    fun updateTender(tender: Tender): Tender?\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"tenderconnector-methods",children:"TenderConnector Methods:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"tender-api-create-tender",children:(0,i.jsx)(n.code,{children:"Create Tender"})})," - Creates a custom tender button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"tender-api-get-tenders",children:(0,i.jsx)(n.code,{children:"Get Tenders"})})," - Retrieves a list of available tenders for a given package name."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"tender-api-update-tender",children:(0,i.jsx)(n.code,{children:"Update Tender"})})," - Updates an existing tender's configuration."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);