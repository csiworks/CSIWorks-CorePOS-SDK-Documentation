"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[8956],{5174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-update-item-stock-quantity","title":"Update Item Stock Quantity","description":"Updates the stock quantity for an item.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/update-item-stock-quantity.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-update-item-stock-quantity","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-update-item-stock-quantity","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":13,"frontMatter":{"id":"inventory-api-update-item-stock-quantity","sidebar_position":13,"title":"Update Item Stock Quantity","description":"Updates the stock quantity for an item.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Delete Category","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-delete-category"},"next":{"title":"Get Dual Price Rate","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-dual-price-rate"}}');var i=n(4848),o=n(8453);const a={id:"inventory-api-update-item-stock-quantity",sidebar_position:13,title:"Update Item Stock Quantity",description:"Updates the stock quantity for an item.",hide_title:!0},s=void 0,c={},d=[{value:"Update Item Stock Quantity",id:"update-item-stock-quantity",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function u(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"update-item-stock-quantity",children:"Update Item Stock Quantity"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Update the stock quantity for a specific inventory item."]}),"\n",(0,i.jsx)(t.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:"fun updateItemStockQuantity(itemId: String, quantity: Double)\n"})}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"itemId"})," (String): Unique ",(0,i.jsx)(t.strong,{children:"UUID"})," identifier of the item"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"quantity"})," (Double): New stock quantity value"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsx)(t.p,{children:"Void (Unit) No return value is provided. The operation is asynchronous, and a callback is triggered to indicate success or failure."}),"\n",(0,i.jsx)(t.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsx)(t.p,{children:"Triggers error callback on failure."}),"\n",(0,i.jsx)(t.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'private fun updateStock(itemId: String, newQuantity: Double) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        try {\r\n            inventoryConnector.updateItemStockQuantity(itemId, newQuantity)\r\n            withContext(Dispatchers.Main) {\r\n                showStockUpdated()\r\n                refreshItemList()\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to update stock: ${e.message}")\r\n            withContext(Dispatchers.Main) {\r\n                showUpdateError()\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun updateItemStockQuantity(itemId: String, quantity: Double): Boolean\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun updateItemStockQuantity(itemId: String, quantity: Double): Boolean {\r\n        return try {\r\n            inventoryConnector.updateItemquaupdateItemStockQuantityntity(itemId, quantity)\r\n            true\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to update stock quantity: ${e.message}")\r\n            false\r\n        }\r\n    }\r\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(6540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);