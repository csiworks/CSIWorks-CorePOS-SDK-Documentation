"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[9424],{349:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/payment-api","title":"PaymentConnector","description":"How to utilize all PaymentConnector functionality.","source":"@site/versioned_docs/version-0.1.5/api-reference/payment-connector.md","sourceDirName":"api-reference","slug":"/api-reference/payment-api","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/payment-api","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":7,"frontMatter":{"id":"payment-api","sidebar_position":7,"title":"PaymentConnector","description":"How to utilize all PaymentConnector functionality.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"MerchantConnector","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/merchant-api"},"next":{"title":"Best Practices","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices"}}');var a=r(4848),o=r(8453);const s={id:"payment-api",sidebar_position:7,title:"PaymentConnector",description:"How to utilize all PaymentConnector functionality.",hide_title:!0},i=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Class Overview",id:"class-overview",level:3},{value:"Initialization:",id:"initialization",level:3},{value:"Process Payment",id:"process-payment",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.admonition,{title:"Not Currently Functional",type:"caution",children:(0,a.jsxs)(n.p,{children:["This connector is not currently in use and may not be functional in the current version. It is likely redundant since payment flows are triggered via Intents with the ",(0,a.jsx)(n.code,{children:"EXTRA_PAYMENT_REQUEST"})," parameter."]})}),"\n",(0,a.jsx)(n.h3,{id:"class-overview",children:"Class Overview"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"class PaymentConnector(context: Context)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"PaymentConnector"})," provides methods to process payment transactions in the CorePOS system. All methods are executed asynchronously and return results through callbacks."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Purpose:"})," Manages payment processing operations for various tender types including credit, debit, cash, EBT, and other payment methods."]}),"\n",(0,a.jsx)(n.h3,{id:"initialization",children:"Initialization:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"val paymentConnector = PaymentConnector(context)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"process-payment",children:"Process Payment"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Purpose:"})," Process a payment transaction for an order using various payment methods."]}),"\n",(0,a.jsx)(n.h3,{id:"signature",children:"Signature:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"fun processPayment(paymentRequest: PaymentRequest, callback: IPaymentCallback)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"paymentRequest"})," (PaymentRequest): Payment request containing payment details and card information"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (IPaymentCallback): Callback interface to handle payment results"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,a.jsx)(n.p,{children:"Void (Unit) - Results are returned through the callback interface"}),"\n",(0,a.jsx)(n.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,a.jsxs)(n.p,{children:["Errors are handled through the callback's ",(0,a.jsx)(n.code,{children:"onError"})," method."]}),"\n",(0,a.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"class PaymentActivity : AppCompatActivity() {\r\n    private lateinit var paymentConnector: PaymentConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_payment)\r\n        \r\n        paymentConnector = PaymentConnector(this)\r\n    }\r\n    \r\n    fun processCardPayment(amount: Long, cardInfo: Card) {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            val paymentRequest = PaymentRequestBuilder.creditCard()\r\n                .setAmount(amount)\r\n                .setTaxAmount(taxAmount)\r\n                .setTipsAmount(tipAmount)\r\n                .setCard(cardInfo)\r\n                .build()\r\n\r\n            paymentConnector.processPayment(paymentRequest, object : IPaymentCallback.Stub() {\r\n                override fun onSuccess(paymentResponse: PaymentResponse) {\r\n                    runOnUiThread {\r\n                        handlePaymentSuccess(paymentResponse)\r\n                    }\r\n                }\r\n\r\n                override fun onError(errorResult: ErrorResult?) {\r\n                    runOnUiThread {\r\n                        handlePaymentError(errorResult)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n    \r\n    fun processCashPayment(amount: Long) {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            val paymentRequest = PaymentRequestBuilder.cash()\r\n                .setAmount(amount)\r\n                .build()\r\n\r\n            paymentConnector.processPayment(paymentRequest, object : IPaymentCallback.Stub() {\r\n                override fun onSuccess(paymentResponse: PaymentResponse) {\r\n                    runOnUiThread {\r\n                        handlePaymentSuccess(paymentResponse)\r\n                    }\r\n                }\r\n\r\n                override fun onError(errorResult: ErrorResult?) {\r\n                    runOnUiThread {\r\n                        handlePaymentError(errorResult)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);