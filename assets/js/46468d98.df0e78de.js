"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[2584],{3108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"best-practices/practices-testing","title":"Testing Practices","description":"Unit and integration tests.","source":"@site/versioned_docs/version-0.1.5/best-practices/testing_practices.md","sourceDirName":"best-practices","slug":"/best-practices/practices-testing","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-testing","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":5,"frontMatter":{"id":"practices-testing","sidebar_position":5,"title":"Testing Practices","description":"Unit and integration tests.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Security Practices","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-security"},"next":{"title":"Code Organization","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-code-organization"}}');var i=t(4848),s=t(8453);const o={id:"practices-testing",sidebar_position:5,title:"Testing Practices",description:"Unit and integration tests.",hide_title:!0},a=void 0,c={},l=[{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"Guidelines for testing: write unit tests for business logic and integration tests for SDK operations."}),"\n",(0,i.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,i.jsx)(n.p,{children:"Create comprehensive unit tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'@RunWith(MockitoJUnitRunner::class)\r\nclass InventoryViewModelTest {\r\n    \r\n    @Mock\r\n    private lateinit var inventoryRepository: InventoryRepository\r\n    \r\n    @Mock\r\n    private lateinit var errorHandler: CorePOSErrorHandler\r\n    \r\n    private lateinit var viewModel: InventoryViewModel\r\n    \r\n    @Before\r\n    fun setup() {\r\n        viewModel = InventoryViewModel(inventoryRepository)\r\n    }\r\n    \r\n    @Test\r\n    fun `loadItems should update LiveData with items`() = runTest {\r\n        // Given\r\n        val items = listOf(\r\n            Item(name = "Test Item", priceType = PriceType.FIXED.code, /* ... */)\r\n        )\r\n        whenever(inventoryRepository.getItems(any())).thenReturn(items)\r\n        \r\n        // When\r\n        viewModel.loadItems()\r\n        \r\n        // Then\r\n        assertEquals(items, viewModel.items.value)\r\n        assertFalse(viewModel.loading.value!!)\r\n        assertNull(viewModel.error.value)\r\n    }\r\n    \r\n    @Test\r\n    fun `loadItems should handle errors`() = runTest {\r\n        // Given\r\n        val error = Exception("Network error")\r\n        whenever(inventoryRepository.getItems(any())).thenThrow(error)\r\n        \r\n        // When\r\n        viewModel.loadItems()\r\n        \r\n        // Then\r\n        assertEquals(error.message, viewModel.error.value)\r\n        assertFalse(viewModel.loading.value!!)\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(n.p,{children:"Test SDK integration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"@RunWith(AndroidJUnit4::class)\r\nclass CorePOSIntegrationTest {\r\n    \r\n    @get:Rule\r\n    val instantExecutorRule = InstantTaskExecutorRule()\r\n    \r\n    @Test\r\n    fun testInventoryOperations() = runTest {\r\n        // Given\r\n        val context = ApplicationProvider.getApplicationContext<Context>()\r\n        val inventoryConnector = InventoryConnector(context)\r\n        \r\n        // When & Then\r\n        try {\r\n            val items = inventoryConnector.getItems()\r\n            assertNotNull(items)\r\n        } catch (e: Exception) {\r\n            // Handle case where CorePOS app is not installed\r\n            assertTrue(e is BindingException || e is PermissionDeniedException)\r\n        }\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);