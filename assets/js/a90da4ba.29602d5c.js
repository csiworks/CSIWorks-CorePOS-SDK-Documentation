"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5053],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},9119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-update-ebt-flags","title":"Update EBT Flags","description":"Updates EBT eligibility flags for multiple items.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/update-ebt-flags.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-update-ebt-flags","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-update-ebt-flags","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":7,"frontMatter":{"id":"inventory-api-update-ebt-flags","sidebar_position":7,"title":"Update EBT Flags","description":"Updates EBT eligibility flags for multiple items.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Get Categories","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-categories"},"next":{"title":"Get Charges","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-charges"}}');var i=t(4848),a=t(8453);const o={id:"inventory-api-update-ebt-flags",sidebar_position:7,title:"Update EBT Flags",description:"Updates EBT eligibility flags for multiple items.",hide_title:!0},s=void 0,l={},c=[{value:"Update EBT Flags",id:"update-ebt-flags",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"update-ebt-flags",children:"Update EBT Flags"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update EBT (Electronic Benefit Transfer) eligibility flags for multiple inventory items in a single operation."]}),"\n",(0,i.jsx)(n.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun updateEbtFlags(flags: Map<String, Boolean>)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"flags"})," (Map (String, Boolean)): A map where keys are item IDs (",(0,i.jsx)(n.strong,{children:"UUID"}),") and values are boolean flags indicating EBT eligibility"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsx)(n.p,{children:"Void (Unit) - No return value is provided. The operation is asynchronous, and a callback is triggered to indicate success or failure."}),"\n",(0,i.jsx)(n.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsx)(n.p,{children:"Triggers error callback on failure."}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'private fun updateItemEbtEligibility(itemEbtFlags: Map<String, Boolean>) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        try {\r\n            inventoryConnector.updateEbtFlags(itemEbtFlags)\r\n            withContext(Dispatchers.Main) {\r\n                showEbtFlagsUpdated()\r\n                refreshItemList()\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to update EBT flags: ${e.message}")\r\n            withContext(Dispatchers.Main) {\r\n                showUpdateError()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Example: Enable EBT for some items, disable for others\r\nval ebtFlags = mapOf(\r\n    "f7a688c1-7bfb-4ef6-8df4-b3e0f5e2d95b" to true,   // Enable EBT\r\n    "4091c9a9-b0af-44bf-804a-b44b8f12b152" to false,  // Disable EBT\r\n    "8c4c172b-ae8b-4eef-a47e-5e9ef203e783" to true    // Enable EBT\r\n)\r\nupdateItemEbtEligibility(ebtFlags)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun updateEbtFlags(flags: Map<String, Boolean>): Boolean\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun updateEbtFlags(flags: Map<String, Boolean>): Boolean {\r\n        return try {\r\n            inventoryConnector.updateEbtFlags(flags)\r\n            true\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to update EBT flags: ${e.message}")\r\n            false\r\n        }\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);