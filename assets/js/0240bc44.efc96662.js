"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[6464],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var s=i(6540);const d={},l=s.createContext(d);function r(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(l.Provider,{value:n},e.children)}},9118:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>a,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-reference/models/models-order","title":"Order","description":"Order models.","source":"@site/versioned_docs/version-0.1.5/api-reference/models/order.md","sourceDirName":"api-reference/models","slug":"/api-reference/models/models-order","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-order","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":3,"frontMatter":{"id":"models-order","sidebar_position":3,"title":"Order","description":"Order models.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Merchant","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-merchant"},"next":{"title":"Tender","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-tender"}}');var d=i(4848),l=i(8453);const r={id:"models-order",sidebar_position:3,title:"Order",description:"Order models.",hide_title:!0},t=void 0,c={},o=[{value:"Order Models",id:"order-models",level:2},{value:"LineItemDiscount",id:"lineitemdiscount",level:2},{value:"Values",id:"values",level:3},{value:"LineItemCharge",id:"lineitemcharge",level:2},{value:"Values",id:"values-1",level:3},{value:"LineItem",id:"lineitem",level:2},{value:"Values",id:"values-2",level:3},{value:"LineItemBuilder",id:"lineitembuilder",level:2},{value:"Factory Methods",id:"factory-methods",level:3},{value:"Builder Methods",id:"builder-methods",level:3},{value:"OrderDiscount",id:"orderdiscount",level:2},{value:"Values",id:"values-3",level:3},{value:"Order",id:"order",level:2},{value:"Values",id:"values-4",level:3},{value:"Transaction",id:"transaction",level:2},{value:"Values",id:"values-5",level:3},{value:"LineItemUtils",id:"lineitemutils",level:2},{value:"Available Methods",id:"available-methods",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"order-models",children:"Order Models"}),"\n",(0,d.jsx)(n.p,{children:"This section covers all order models (entities) used in the API"}),"\n",(0,d.jsx)(n.h2,{id:"lineitemdiscount",children:"LineItemDiscount"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"data class LineItemDiscount\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"LineItemDiscount"})," model represents a discount, applied to a single line item, containing the following fields:"]}),"\n",(0,d.jsx)(n.h3,{id:"values",children:"Values"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemDiscountId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the line item discount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"name"}),': The name of the discount (e.g., "Holiday Sale").']}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"discountType"}),": The type of discount. Can be ",(0,d.jsx)(n.code,{children:"FIXED (0)"})," or ",(0,d.jsx)(n.code,{children:"PERCENTAGE (1)"}),".","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"FIXED"}),", Represents a fixed amount discount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"PERCENTAGE"}),", Represents a percentage discount."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"amount"}),": The discount amount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"isActive"}),": A flag indicating whether the discount is currently active."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"lineitemcharge",children:"LineItemCharge"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"data class LineItemCharge\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"LineItemCharge"})," model represents taxes and fees, applied to a single line item, containing the following fields:"]}),"\n",(0,d.jsx)(n.h3,{id:"values-1",children:"Values"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemCharge"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the line item charge."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"chargeId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the charge. Reference to the corresponding inventory ",(0,d.jsx)(n.a,{href:"models-inventory#charge",children:(0,d.jsx)(n.strong,{children:"Charge"})}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"name"}),': The name of the charge (e.g., "Sales Tax", "Shipping Fee").']}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"chargeAmountType"}),": The type of charge amount. Can be ",(0,d.jsx)(n.code,{children:"FIXED (0)"})," or ",(0,d.jsx)(n.code,{children:"PERCENTAGE (1)"}),".","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"FIXED"}),", Represents a fixed amount, such as a flat fee."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"PERCENTAGE"}),", Represents a percentage, such as a tax rate."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"amount"}),": The amount of the charge.","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["If the type is ",(0,d.jsx)(n.strong,{children:"FIXED"}),", it's a specific amount."]}),"\n",(0,d.jsxs)(n.li,{children:["If it's ",(0,d.jsx)(n.strong,{children:"PERCENTAGE"}),", it represents the percentage value."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"isDefault"}),": A flag indicating whether this charge is the default charge."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"lineitem",children:"LineItem"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"data class LineItem\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"LineItem"})," model represents a purchased or selected item within an order, containing the following fields:"]}),"\n",(0,d.jsx)(n.admonition,{title:"Line Item Introduction",type:"note",children:(0,d.jsx)(n.p,{children:"The LineItem can be thought of as an item placed on the checkout conveyor belt at a store."})}),"\n",(0,d.jsx)(n.h3,{id:"values-2",children:"Values"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the line item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"quantity"}),": The quantity of the item in the line item (supports fractional values)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"totalCash"}),": The total cash price for the line item (after adjustments)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"totalCard"}),": The total card price for the line item (after adjustments)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"itemId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the item. Reference to the corresponding inventory ",(0,d.jsx)(n.a,{href:"models-inventory#item",children:(0,d.jsx)(n.strong,{children:"Item"})}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"imagePath"}),": A path to the item's image."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"thumbnailPath"}),": A path to the item's thumbnail image."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"name"}),": The name of the item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"priceType"}),": ",(0,d.jsx)(n.a,{href:"models-inventory#pricetype-enum",children:(0,d.jsx)(n.strong,{children:"PriceType"})}),", the type of pricing applied to this line item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"unitType"}),": The unit type for the item (e.g., ",(0,d.jsx)(n.code,{children:"Lb"}),", ",(0,d.jsx)(n.code,{children:"Oz"}),", ",(0,d.jsx)(n.code,{children:"Kg"}),")."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"unitCash"}),": The cash price per unit of the item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"unitCard"}),": The card price per unit of the item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemDiscounts"}),": A list of ",(0,d.jsx)(n.a,{href:"#lineitemdiscount",children:(0,d.jsx)(n.strong,{children:"LineItemDiscount"})})," applied to this line item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemTaxes"}),": A list of ",(0,d.jsx)(n.a,{href:"#lineitemcharge",children:(0,d.jsx)(n.strong,{children:"LineItemCharge"})})," with ",(0,d.jsx)(n.code,{children:"amountType = Percentage"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemFees"}),": A list of ",(0,d.jsx)(n.a,{href:"#lineitemcharge",children:(0,d.jsx)(n.strong,{children:"LineItemCharge"})})," with ",(0,d.jsx)(n.code,{children:"amountType = Fixed"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lineItemPayment"}),": A ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for transaction wich associated with this line item."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"isEBT"}),": A flag indicating whether the line item is eligible for Electronic Benefit Transfer (EBT)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"devNotes"}),": A map of developer notes or metadata for debugging and custom usage."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"binName"}),': A specific identifier for categorizing items in an order. This is the general name of a specific group of items, united by some logic (e.g., "EBT Items").']}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"taxable"}),": A flag indicating whether the line item is subject to taxes."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"lineitembuilder",children:"LineItemBuilder"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"class LineItemBuilder\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"LineItemBuilder"})," class provides a fluent interface for creating and modifying ",(0,d.jsx)(n.code,{children:"LineItem"})," objects with validation and utility methods."]}),"\n",(0,d.jsx)(n.h3,{id:"factory-methods",children:"Factory Methods"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"create()"})," - Creates a new empty builder instance"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"from(lineItem)"})," - Creates a builder from an existing LineItem"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"variablePrice(itemId, name, cashPrice, devNotes?, binName?)"})," - Creates a variable price line item"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"perUnit(itemId, name, quantity, unitPrice, devNotes?, binName?)"})," - Creates a per-unit line item"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"fixedPrice(itemId, name, devNotes?, binName?)"})," - Creates a fixed price line item"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"builder-methods",children:"Builder Methods"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Basic Setters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setLineItemId(String?)"})," - Set line item ID"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setQuantity(Double)"})," - Set item quantity"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setTotalCash(Long?)"})," - Set total cash price"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setTotalCard(Long?)"})," - Set total card price"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setItemId(String?)"})," - Set item reference ID"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setName(String)"})," - Set item name"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setPriceType(Int)"})," - Set pricing type"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setLineItemPayment(String?)"})," - Set transaction id for line-item"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setEBT(Boolean)"})," - Set EBT eligibility"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setBinName(String?)"})," - Set category identifier"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"setTaxable(Boolean)"})," - Set tax eligibility"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Collection Methods:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addDiscount(LineItemDiscount)"})," - Add a discount"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addTax(LineItemCharge)"})," - Add a tax"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addFee(LineItemCharge)"})," - Add a fee"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addDevNote(String, String)"})," - Add developer note"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"removeDiscount(String)"})," - Remove discount by ID"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"removeTax(String)"})," - Remove tax by ID"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"removeFee(String)"})," - Remove fee by ID"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"clearDiscounts()"})," - Remove all discounts"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"clearTaxes()"})," - Remove all taxes"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"clearFees()"})," - Remove all fees"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Build Methods:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"build()"})," - Build and validate LineItem (throws on error)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"buildOrNull()"})," - Build LineItem, return null on error"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"isValid()"})," - Check if current state is valid"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"getValidationErrors()"})," - Get list of validation errors"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"orderdiscount",children:"OrderDiscount"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"data class OrderDiscount\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"OrderDiscount"})," model represents a discount applied at the ",(0,d.jsx)(n.strong,{children:"order level"})," (as opposed to line-item level), containing the following fields:"]}),"\n",(0,d.jsx)(n.h3,{id:"values-3",children:"Values"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"orderDiscountId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the order discount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"discountId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the discount. Reference to the corresponding inventory ",(0,d.jsx)(n.a,{href:"models-inventory#discount",children:(0,d.jsx)(n.strong,{children:"Discount"})}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"name"}),': The name of the discount (e.g., "Holiday Promo", "Employee Discount").']}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"discountType"}),": The type of discount. Can be ",(0,d.jsx)(n.code,{children:"FIXED (0)"})," or ",(0,d.jsx)(n.code,{children:"PERCENTAGE (1)"}),".","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"FIXED"}),", Represents a fixed amount discount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"PERCENTAGE"}),", Represents a percentage discount."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"amount"}),": The discount amount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"isActive"}),": A flag indicating whether the discount is currently active."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"order",children:"Order"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"data class Order\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"Order"})," model represents a order, containing the following fields:"]}),"\n",(0,d.jsx)(n.h3,{id:"values-4",children:"Values"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"orderId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"customerId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier. Reference to the customer who placed the order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"items"}),": A list of ",(0,d.jsx)(n.a,{href:"#lineitem",children:(0,d.jsx)(n.strong,{children:"LineItem"})})," objects included in the order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cashSubtotal"}),": The subtotal of the order when paid with cash (before discounts and taxes)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cardSubtotal"}),": The subtotal of the order when paid with card (before discounts and taxes)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"ebtSubtotal"}),": The subtotal of the order eligible for ",(0,d.jsx)(n.strong,{children:"EBT"})," (Electronic Benefit Transfer)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"orderDiscounts"}),": A list of ",(0,d.jsx)(n.a,{href:"#orderdiscount",children:(0,d.jsx)(n.strong,{children:"OrderDiscount"})})," applied to the order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cashTax"}),": The total tax applied when paying with cash."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cardTax"}),": The total tax applied when paying with card."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"tipAmount"}),": The total tip amount added to the order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"fee"}),": The total fees applied to the order (e.g., service fees)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cashTotal"}),": The final total amount when paying with cash (subtotal + tax + fees - discounts)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cardTotal"}),": The final total amount when paying with card (subtotal + tax + fees - discounts)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"ebtTotal"}),": The final total amount eligible for ",(0,d.jsx)(n.strong,{children:"EBT"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"transactions"}),": A list of ",(0,d.jsx)(n.a,{href:"#transaction",children:(0,d.jsx)(n.strong,{children:"Transaction"})})," objects associated with this order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"state"}),": The current state of the order. Can be:","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"OPEN (0)"})," \u2013 Order is open and not yet paid."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"PAID (1)"})," \u2013 Order is fully paid."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"PARTIALLY_PAID (2)"})," \u2013 Order is partially paid."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"PARTIALLY_REFUNDED (3)"})," \u2013 Order has been partially refunded."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"REFUNDED (4)"})," \u2013 Order has been fully refunded."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"notes"}),": Optional notes or comments about the order."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"createdAt"}),": A timestamp (epoch) representing when the order was created."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"transaction",children:"Transaction"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"data class Transaction\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"Transaction"})," model represents a financial operation related to an order, containing the following fields:"]}),"\n",(0,d.jsx)(n.h3,{id:"values-5",children:"Values"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"transactionId"}),": A unique ",(0,d.jsx)(n.strong,{children:"UUID"})," identifier for the transaction."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"orderId"}),": Reference to the ",(0,d.jsx)(n.a,{href:"#order",children:(0,d.jsx)(n.strong,{children:"Order"})})," this transaction belongs to."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"transactionType"}),": The type of transaction. Can be:","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"SALE (0)"})," \u2013 A completed sale transaction."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"VOID (1)"})," \u2013 A voided transaction (canceled before settlement)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"REFUND (2)"})," \u2013 A refund transaction."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"paymentMethod"}),": The method of payment used. Can be:","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"CASH (0)"})," \u2013 Cash payment."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"CREDIT_CARD (1)"})," \u2013 Credit card payment."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"DEBIT_CARD (2)"})," \u2013 Debit card payment."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"EBT_CARD (3)"})," \u2013 Electronic Benefit Transfer (EBT) card payment."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"amount"}),": The total transaction amount."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"taxAmount"}),": The portion of the transaction that is tax."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cardNumber"}),": The masked card number (if applicable)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"cardType"}),": The type of card used if applicable."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"date"}),": A timestamp (epoch) representing when the transaction occurred."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"lineitemutils",children:"LineItemUtils"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-kotlin",children:"object LineItemUtils\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"LineItemUtils"})," object provides utility functions for common LineItem operations."]}),"\n",(0,d.jsx)(n.h3,{id:"available-methods",children:"Available Methods"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"updateQuantity(lineItem, newQuantity)"})," - Updates quantity and recalculates totals"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"updateUnitPrice(lineItem, newUnitPrice)"})," - Updates unit price and recalculates totals"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addDiscount(lineItem, name, amount, type)"})," - Adds a discount to the line item"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"removeDiscount(lineItem, discountName)"})," - Removes a discount by name"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addTax(lineItem, name, amount, type)"})," - Adds a tax to the line item"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"updateName(lineItem, newName)"})," - Updates the item name"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"updateEBTStatus(lineItem, isEBT)"})," - Updates EBT eligibility"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"addDevNote(lineItem, key, value)"})," - Adds or updates a developer note"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"removeDevNote(lineItem, key)"})," - Removes a developer note"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"createUpdateCopy(lineItem)"})," - Creates a copy for updates"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"validateForUpdate(lineItem)"})," - Validates item for update operations"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}}}]);