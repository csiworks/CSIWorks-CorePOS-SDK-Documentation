"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[2899],{8414:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/order-connector/order-api-update-line-item","title":"Update Line Item","description":"Update an existing line item in an order.","source":"@site/versioned_docs/version-0.1.5/api-reference/order-connector/update-line-item.md","sourceDirName":"api-reference/order-connector","slug":"/api-reference/order-connector/order-api-update-line-item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-update-line-item","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":8,"frontMatter":{"id":"order-api-update-line-item","sidebar_position":8,"title":"Update Line Item","description":"Update an existing line item in an order.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Delete Line Item Discount","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-delete-line-item-discount"},"next":{"title":"Delete Line Item Discounts","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-delete-line-item-discounts"}}');var i=r(4848),o=r(8453);const d={id:"order-api-update-line-item",sidebar_position:8,title:"Update Line Item",description:"Update an existing line item in an order.",hide_title:!0},a=void 0,s={},l=[{value:"Update Line Item",id:"update-line-item",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"update-line-item",children:"Update Line Item"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update an existing line item in an order."]}),"\n",(0,i.jsx)(n.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun updateLineItem(orderId: String, lineItem: LineItem): LineItem?\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"orderId"})," (String): Unique ",(0,i.jsx)(n.strong,{children:"UUID"})," identifier of the ",(0,i.jsx)(n.a,{href:"../models/models-order#order",children:(0,i.jsx)(n.code,{children:"Order"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lineItem"})," (LineItem): The ",(0,i.jsx)(n.a,{href:"../models/models-order#lineitem",children:(0,i.jsx)(n.code,{children:"LineItem"})})," to update with new data."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"LineItem?"})," - Returns the updated ",(0,i.jsx)(n.a,{href:"../models/models-order#lineitem",children:(0,i.jsx)(n.code,{children:"LineItem"})})," if successful, or null if the operation fails."]}),"\n",(0,i.jsx)(n.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsx)(n.p,{children:"Returns null on failure."}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"private fun updateItemQuantity(orderId: String, lineItem: LineItem, newQuantity: Double) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        val updatedLineItem = lineItem.copy(quantity = newQuantity)\r\n        val result = orderConnector.updateLineItem(orderId, updatedLineItem)\r\n        withContext(Dispatchers.Main) {\r\n            result?.let { updateOrderUI(it) }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"interface OrderRepository {\r\n    suspend fun updateLineItem(orderId: String, lineItem: LineItem): LineItem?\r\n}\r\n\r\nclass OrderRepositoryImpl(\r\n    private val orderConnector: OrderConnector\r\n) : OrderRepository {\r\n    override suspend fun updateLineItem(orderId: String, lineItem: LineItem): LineItem? {\r\n        return try {\r\n            orderConnector.updateLineItem(orderId, lineItem)\r\n        } catch (_: Exception) { null }\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function d(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);