"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5197],{8453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>o});var n=i(6540);const t={},d=n.createContext(t);function a(e){const r=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(d.Provider,{value:r},e.children)}},9523:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>s});const n=JSON.parse('{"id":"api-reference/order-connector/order-api-add-variable-price-line-item","title":"Add Variable-Price Line Item","description":"Add a line item priced by explicit cash amount.","source":"@site/versioned_docs/version-0.1.5/api-reference/order-connector/add-variable-price-line-item.md","sourceDirName":"api-reference/order-connector","slug":"/api-reference/order-connector/order-api-add-variable-price-line-item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-add-variable-price-line-item","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":4,"frontMatter":{"id":"order-api-add-variable-price-line-item","sidebar_position":4,"title":"Add Variable-Price Line Item","description":"Add a line item priced by explicit cash amount.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Get Active Order","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-get-active-order"},"next":{"title":"Add Fixed-Price Line Item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-add-fixed-price-line-item"}}');var t=i(4848),d=i(8453);const a={id:"order-api-add-variable-price-line-item",sidebar_position:4,title:"Add Variable-Price Line Item",description:"Add a line item priced by explicit cash amount.",hide_title:!0},o=void 0,c={},s=[{value:"Add Variable-Price Line Item",id:"add-variable-price-line-item",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern::",id:"best-practice-with-repository-pattern",level:3}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"add-variable-price-line-item",children:"Add Variable-Price Line Item"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Purpose:"})," Add an item to an order with a specified cash price (use when the item\u2019s price is not fixed in catalog)."]}),"\n",(0,t.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"fun addVariablePriceLineItem(\r\n    orderId: String,\r\n    itemId: String,\r\n    cashPrice: Long,\r\n    devNotes: Map<String, String>?,\r\n    binName: String?\r\n): LineItem?\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"orderId"})," (String): Unique ",(0,t.jsx)(r.strong,{children:"UUID"})," identifier of the ",(0,t.jsx)(r.a,{href:"../models/models-order#order",children:(0,t.jsx)(r.code,{children:"Order"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"itemId"})," (String): Unique ",(0,t.jsx)(r.strong,{children:"UUID"})," identifier of the inventory ",(0,t.jsx)(r.a,{href:"../models/models-inventory#item",children:(0,t.jsx)(r.code,{children:"Item"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"cashPrice"})," (Long): Price in smallest currency unit."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"devNotes"})," (Map(String, String)?, optional): Free-form metadata."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"binName"})," (String?): Optional, A specific identifier for categorizing items in an order. This is the general name of a specific group of items, united by some logic."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"LineItem?"}),": The created ",(0,t.jsx)(r.a,{href:"../models/models-order#lineitem",children:(0,t.jsx)(r.code,{children:"LineItem"})}),", or ",(0,t.jsx)(r.code,{children:"null"})," if the operation fails."]}),"\n",(0,t.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,t.jsxs)(r.p,{children:["Returns ",(0,t.jsx)(r.code,{children:"null"})," on error."]}),"\n",(0,t.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'private fun addCustomPricedItem(orderId: String, itemId: String, priceCents: Long) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        val li = orderConnector.addVariablePriceLineItem(orderId, itemId, priceCents, null, null)\r\n        withContext(Dispatchers.Main) {\r\n            if (li != null) {\r\n                onLineItemAdded(li)\r\n            } else {\r\n                showError("Failed to add variable-price line item")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern::"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"interface OrderRepository {\r\n        suspend fun addVariablePrice(\r\n        orderId: String,\r\n        itemId: String,\r\n        cashPrice: Long,\r\n        devNotes: Map<String, String>?,\r\n        binName: String?\r\n    ): LineItem?\r\n}\r\n\r\nclass OrderRepositoryImpl(\r\n    private val orderConnector: OrderConnector\r\n) : OrderRepository {\r\n    override suspend fun addVariablePrice(\r\n        orderId: String, itemId: String, cashPrice: Long, devNotes: Map<String, String>?, binName: String?\r\n    ): LineItem? = try {\r\n        orderConnector.addVariablePriceLineItem(orderId, itemId, cashPrice, devNotes, binName)\r\n    } catch (_: Exception) { null }\r\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);