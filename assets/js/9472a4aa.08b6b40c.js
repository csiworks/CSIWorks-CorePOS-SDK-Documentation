"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5690],{1600:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"best-practices/practices-performance-optimization","title":"Performance Optimization","description":"Connection, caching, background tasks.","source":"@site/versioned_docs/version-0.1.5/best-practices/performance-optimization.md","sourceDirName":"best-practices","slug":"/best-practices/practices-performance-optimization","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-performance-optimization","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":2,"frontMatter":{"id":"practices-performance-optimization","sidebar_position":2,"title":"Performance Optimization","description":"Connection, caching, background tasks.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-architecture"},"next":{"title":"Error Handling","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-error-handling"}}');var o=r(4848),i=r(8453);const c={id:"practices-performance-optimization",sidebar_position:2,title:"Performance Optimization",description:"Connection, caching, background tasks.",hide_title:!0},a=void 0,s={},l=[{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Connection Management",id:"connection-management",level:3},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Background Processing",id:"background-processing",level:3}];function d(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsx)(e.p,{children:"Guidelines to improve performance: manage connections properly, implement caching, and use background workers for long-running tasks."}),"\n",(0,o.jsx)(e.h3,{id:"connection-management",children:"Connection Management"}),"\n",(0,o.jsx)(e.p,{children:"Implement proper connection lifecycle management:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-kotlin",children:'class CorePOSManager @Inject constructor(\r\n    private val context: Context\r\n) {\r\n    private var inventoryConnector: InventoryConnector? = null\r\n    private var orderConnector: OrderConnector? = null\r\n    private var merchantConnector: MerchantConnector? = null\r\n    \r\n    fun initialize() {\r\n        inventoryConnector = InventoryConnector(context)\r\n        orderConnector = OrderConnector(context)\r\n        merchantConnector = MerchantConnector(context)\r\n    }\r\n    \r\n    fun getInventoryConnector(): InventoryConnector {\r\n        return inventoryConnector ?: throw IllegalStateException("CorePOS not initialized")\r\n    }\r\n    \r\n    fun getOrderConnector(): OrderConnector {\r\n        return orderConnector ?: throw IllegalStateException("CorePOS not initialized")\r\n    }\r\n    \r\n    fun getMerchantConnector(): MerchantConnector {\r\n        return merchantConnector ?: throw IllegalStateException("CorePOS not initialized")\r\n    }\r\n    \r\n    fun cleanup() {\r\n        inventoryConnector?.disconnect()\r\n        orderConnector?.disconnect()\r\n        merchantConnector?.disconnect()\r\n        \r\n        inventoryConnector = null\r\n        orderConnector = null\r\n        merchantConnector = null\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,o.jsx)(e.p,{children:"Implement caching to reduce API calls:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-kotlin",children:'class CachedInventoryRepository @Inject constructor(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    private val cache = mutableMapOf<String, Item>()\r\n    private val itemsCache = mutableListOf<Item>()\r\n    private var lastCacheTime = 0L\r\n    private val cacheValidityDuration = 5 * 60 * 1000L // 5 minutes\r\n    \r\n    override suspend fun getItems(filter: ItemFilter?): List<Item> {\r\n        val now = System.currentTimeMillis()\r\n        \r\n        // Return cached data if still valid\r\n        if (now - lastCacheTime < cacheValidityDuration && itemsCache.isNotEmpty()) {\r\n            return if (filter != null) {\r\n                itemsCache.filter { item ->\r\n                    (filter.categoryId == null || \r\n                     item.categories?.any { it.categoryId == filter.categoryId } == true) &&\r\n                    (filter.productCode == null || item.productCode == filter.productCode)\r\n                }\r\n            } else {\r\n                itemsCache\r\n            }\r\n        }\r\n        \r\n        // Fetch fresh data\r\n        return try {\r\n            val items = inventoryConnector.getItems(filter) ?: emptyList()\r\n            itemsCache.clear()\r\n            itemsCache.addAll(items)\r\n            lastCacheTime = now\r\n            items\r\n        } catch (e: Exception) {\r\n            Log.e("CachedRepo", "Failed to get items: ${e.message}")\r\n            itemsCache // Return cached data as fallback\r\n        }\r\n    }\r\n    \r\n    override suspend fun getItem(itemId: String): Item? {\r\n        // Check cache first\r\n        cache[itemId]?.let { return it }\r\n        \r\n        // Fetch from API\r\n        return try {\r\n            val item = inventoryConnector.getItem(itemId)\r\n            item?.let { cache[itemId] = it }\r\n            item\r\n        } catch (e: Exception) {\r\n            Log.e("CachedRepo", "Failed to get item: ${e.message}")\r\n            null\r\n        }\r\n    }\r\n    \r\n    fun invalidateCache() {\r\n        cache.clear()\r\n        itemsCache.clear()\r\n        lastCacheTime = 0L\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"background-processing",children:"Background Processing"}),"\n",(0,o.jsx)(e.p,{children:"Use WorkManager for background operations:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-kotlin",children:'class InventorySyncWorker(\r\n    context: Context,\r\n    params: WorkerParameters\r\n) : CoroutineWorker(context, params) {\r\n    \r\n    @Inject\r\n    lateinit var inventoryRepository: InventoryRepository\r\n    \r\n    override suspend fun doWork(): Result {\r\n        return try {\r\n            // Sync inventory data\r\n            val items = inventoryRepository.getItems()\r\n            \r\n            // Update local database\r\n            updateLocalDatabase(items)\r\n            \r\n            Result.success()\r\n        } catch (e: Exception) {\r\n            Log.e("SyncWorker", "Failed to sync inventory: ${e.message}")\r\n            Result.retry()\r\n        }\r\n    }\r\n    \r\n    private suspend fun updateLocalDatabase(items: List<Item>) {\r\n        // Update local database with inventory data\r\n    }\r\n}\r\n\r\n// Schedule periodic sync\r\nfun scheduleInventorySync() {\r\n    val constraints = Constraints.Builder()\r\n        .setRequiredNetworkType(NetworkType.CONNECTED)\r\n        .build()\r\n    \r\n    val syncRequest = PeriodicWorkRequestBuilder<InventorySyncWorker>(\r\n        15, TimeUnit.MINUTES\r\n    ).setConstraints(constraints)\r\n        .build()\r\n    \r\n    WorkManager.getInstance(context).enqueueUniquePeriodicWork(\r\n        "inventory_sync",\r\n        ExistingPeriodicWorkPolicy.KEEP,\r\n        syncRequest\r\n    )\r\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>c,x:()=>a});var t=r(6540);const o={},i=t.createContext(o);function c(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);