"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[4197],{1029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>E,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api-reference/models/models-intents","title":"Intents","description":"Intent constants and utilities for CorePOS SDK inter-app communication.","source":"@site/versioned_docs/version-0.1.5/api-reference/models/intents.md","sourceDirName":"api-reference/models","slug":"/api-reference/models/models-intents","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-intents","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":7,"frontMatter":{"id":"models-intents","sidebar_position":7,"title":"Intents","description":"Intent constants and utilities for CorePOS SDK inter-app communication.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Payment","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/models/models-payment"},"next":{"title":"InventoryConnector","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/inventory-connector"}}');var i=t(4848),s=t(8453);const o={id:"models-intents",sidebar_position:7,title:"Intents",description:"Intent constants and utilities for CorePOS SDK inter-app communication.",hide_title:!0},d=void 0,c={},a=[{value:"Intents",id:"intents",level:2},{value:"Action Intent Descriptions",id:"action-intent-descriptions",level:2},{value:"Extra Data Descriptions",id:"extra-data-descriptions",level:2},{value:"Event Descriptions",id:"event-descriptions",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic BroadcastReceiver Implementation",id:"basic-broadcastreceiver-implementation",level:3},{value:"Registering the BroadcastReceiver",id:"registering-the-broadcastreceiver",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"intents",children:"Intents"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Intents"})," object contains constants for CorePOS SDK intent actions, extras, and events used for inter-app communication and system notifications."]}),"\n",(0,i.jsx)(n.h2,{id:"action-intent-descriptions",children:"Action Intent Descriptions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_ORDER_CREATED"}),": Broadcast when a new order is created in the system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_ORDER_SAVED"}),": Broadcast when an existing order is saved/updated"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_ORDER_CLOSED"}),": Broadcast when an order is closed (completed transaction)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_ORDER_DELETED"}),": Broadcast when an order is deleted from the system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_LINE_ITEM_ADDED"}),": Broadcast when a line item is added to an order"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_PAYMENT_PROCESSED"}),": Broadcast when a payment transaction is processed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_LINE_ITEM_DELETED"}),": Broadcast when a line item is removed from an order"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_BARCODE_SCANNED"}),": Broadcast when a barcode is scanned via the scanner"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_MERCHANT_TENDER"}),": Broadcast when a merchant tender action is initiated ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTION_MERCHANT_ACTION"}),": Broadcast when a custom merchant action is triggered"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"extra-data-descriptions",children:"Extra Data Descriptions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_AMOUNT"})," (Double): Final amount in the smallest unit ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Required outgoing extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_TIP_AMOUNT"})," (Double): Tip in smallest unit ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Optional outgoing extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_CLIENT_ID"})," (String): Unique ID from your system (e.g., a payment or transaction ID) ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Optional outgoing extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_NOTE"})," (String): Notes about the payment or optional order notes ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Incoming/outgoing extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_ORDER_ID"})," (String): CorePOS order UUID ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Incoming extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_CASH_AMOUNT"})," (Double): Total cash amount in the smallest currency unit (e.g., cents) ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Incoming extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_CARD_AMOUNT"})," (Double): Total card amount in the smallest currency unit (e.g., cents) ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Incoming extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_CASH_TAX_AMOUNT"})," (Double): Portion of the amount that is cash tax, in smallest unit ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Incoming extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_CARD_TAX_AMOUNT"})," (Double): Portion of the amount that is card tax, in smallest unit ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Incoming extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_BARCODE"})," (String): The scanned barcode data/value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_BARCODE_FORMAT"})," (String): The format/type of the scanned barcode"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_LINE_ITEM_ID"})," (String): Unique UUID identifier for a single line item"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_LINE_ITEM_IDS"})," (List(String)): List of line item UUIDs ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Optional outgoing extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_ITEM_ID"})," (String): Unique UUID identifier for an inventory item"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_ACTION_NAME"})," (String): Name of the custom action being performed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_PAYMENT_REQUEST"})," (PaymentRequest): Serialized payment request object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_TENDER_TYPE"})," (TenderType): Specify a concrete TenderType (e.g., EBT). If omitted, CorePOS records it as a Custom Tender ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Optional outgoing extra]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXTRA_TENDER"})," (String): The Tender record configured in CorePOS ",(0,i.jsx)(n.strong,{children:"[Used in Tender connector - Optional outgoing extra]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"event-descriptions",children:"Event Descriptions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EVENT_ORDER_BUILD_START"}),": Triggered when the order building process begins"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EVENT_CART_OVERVIEW_START"}),": Triggered when the cart overview screen is displayed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EVENT_CASH_CHARGE_START"}),": Triggered when cash payment processing begins"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EVENT_CREDIT_CHARGE_START"}),": Triggered when credit card processing begins"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EVENT_DEBIT_CHARGE_START"}),": Triggered when debit card processing begins"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EVENT_PAYMENT_SELECTION_START"}),": Triggered when the payment selection screen appears"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-broadcastreceiver-implementation",children:"Basic BroadcastReceiver Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class CorePOSReceiver : BroadcastReceiver() {\r\n    override fun onReceive(context: Context, intent: Intent) {\r\n        when (intent.action) {\r\n            Intents.ACTION_ORDER_CREATED -> {\r\n                val orderId = intent.getStringExtra(Intents.EXTRA_ORDER_ID)\r\n                val amount = intent.getDoubleExtra(Intents.EXTRA_AMOUNT, 0.0)\r\n                handleOrderCreated(orderId, amount)\r\n            }\r\n            \r\n            Intents.ACTION_ORDER_SAVED -> {\r\n                val orderId = intent.getStringExtra(Intents.EXTRA_ORDER_ID)\r\n                handleOrderSaved(orderId)\r\n            }\r\n            \r\n            Intents.ACTION_ORDER_CLOSED -> {\r\n                val orderId = intent.getStringExtra(Intents.EXTRA_ORDER_ID)\r\n                val amount = intent.getDoubleExtra(Intents.EXTRA_AMOUNT, 0.0)\r\n                handleOrderClosed(orderId, amount)\r\n            }\r\n            \r\n            Intents.ACTION_LINE_ITEM_ADDED -> {\r\n                val orderId = intent.getStringExtra(Intents.EXTRA_ORDER_ID)\r\n                val lineItemId = intent.getStringExtra(Intents.EXTRA_LINE_ITEM_ID)\r\n                val itemId = intent.getStringExtra(Intents.EXTRA_ITEM_ID)\r\n                handleLineItemAdded(orderId, lineItemId, itemId)\r\n            }\r\n            \r\n            Intents.ACTION_BARCODE_SCANNED -> {\r\n                val barcode = intent.getStringExtra(Intents.EXTRA_BARCODE)\r\n                val format = intent.getStringExtra(Intents.EXTRA_BARCODE_FORMAT)\r\n                handleBarcodeScanned(barcode, format)\r\n            }\r\n            \r\n            Intents.ACTION_PAYMENT_PROCESSED -> {\r\n                val orderId = intent.getStringExtra(Intents.EXTRA_ORDER_ID)\r\n                val amount = intent.getDoubleExtra(Intents.EXTRA_AMOUNT, 0.0)\r\n                val tipAmount = intent.getDoubleExtra(Intents.EXTRA_TIP_AMOUNT, 0.0)\r\n                handlePaymentProcessed(orderId, amount, tipAmount)\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"registering-the-broadcastreceiver",children:"Registering the BroadcastReceiver"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class MainActivity : AppCompatActivity() {\r\n    private lateinit var corePOSReceiver: CorePOSReceiver\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        \r\n        // Initialize receiver\r\n        corePOSReceiver = CorePOSReceiver()\r\n        \r\n        // Create intent filter for CorePOS actions\r\n        val intentFilter = IntentFilter().apply {\r\n            addAction(Intents.ACTION_ORDER_CREATED)\r\n            addAction(Intents.ACTION_ORDER_SAVED)\r\n            addAction(Intents.ACTION_ORDER_CLOSED)\r\n            addAction(Intents.ACTION_ORDER_DELETED)\r\n            addAction(Intents.ACTION_LINE_ITEM_ADDED)\r\n            addAction(Intents.ACTION_LINE_ITEM_DELETED)\r\n            addAction(Intents.ACTION_PAYMENT_PROCESSED)\r\n            addAction(Intents.ACTION_BARCODE_SCANNED)\r\n            addAction(Intents.ACTION_MERCHANT_TENDER)\r\n            addAction(Intents.ACTION_MERCHANT_ACTION)\r\n        }\r\n        \r\n        // Register receiver\r\n        registerReceiver(corePOSReceiver, intentFilter)\r\n    }\r\n    \r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        // Unregister receiver to prevent memory leaks\r\n        unregisterReceiver(corePOSReceiver)\r\n    }\r\n}\n"})})]})}function E(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);