"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5496],{4726:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"common-issues/common-issues-memory","title":"Memory Issues","description":"Leaks, lifecycle, and cleanup.","source":"@site/versioned_docs/version-0.1.5/common-issues/memory-issues.md","sourceDirName":"common-issues","slug":"/common-issues/common-issues-memory","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/common-issues/common-issues-memory","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":4,"frontMatter":{"id":"common-issues-memory","sidebar_position":4,"title":"Memory Issues","description":"Leaks, lifecycle, and cleanup.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Debugging Tips","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/common-issues/common-issues-debugging-tips"},"next":{"title":"Getting Help","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/common-issues/common-issues-getting-help"}}');var r=s(4848),t=s(8453);const i={id:"common-issues-memory",sidebar_position:4,title:"Memory Issues",description:"Leaks, lifecycle, and cleanup.",hide_title:!0},c=void 0,l={},a=[{value:"Memory Issues",id:"memory-issues",level:2},{value:"Issue: Memory leaks from connectors",id:"issue-memory-leaks-from-connectors",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"memory-issues",children:"Memory Issues"}),"\n",(0,r.jsx)(n.p,{children:"Troubleshooting guide for memory-related problems, including connector leaks, cancelled background operations, and improper cleanup."}),"\n",(0,r.jsx)(n.admonition,{title:"Important Notes",type:"caution",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store connectors as class properties"}),"\n",(0,r.jsxs)(n.li,{children:["Call ",(0,r.jsx)(n.code,{children:"disconnect()"})," when done to clean up resources"]}),"\n",(0,r.jsx)(n.li,{children:"Handle configuration changes properly"}),"\n"]})}),"\n",(0,r.jsx)(n.h3,{id:"issue-memory-leaks-from-connectors",children:"Issue: Memory leaks from connectors"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"App memory usage increases over time"}),"\n",(0,r.jsx)(n.li,{children:"OutOfMemoryError exceptions"}),"\n",(0,r.jsx)(n.li,{children:"App becomes slow"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Causes:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Connectors not properly disconnected"}),"\n",(0,r.jsx)(n.li,{children:"Large data objects not released"}),"\n",(0,r.jsx)(n.li,{children:"Background operations not cancelled"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Proper lifecycle management:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class MainActivity : AppCompatActivity() {\r\n    private lateinit var inventoryConnector: InventoryConnector\r\n    \r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        inventoryConnector = InventoryConnector(this)\r\n    }\r\n    \r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        inventoryConnector.disconnect()\r\n    }\r\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Cancel background operations:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class InventoryViewModel : ViewModel() {\r\n    fun loadItems() {\r\n        viewModelScope.launch {\r\n            try {\r\n                val items = inventoryConnector.getItems()\r\n                _items.value = items\r\n            } catch (e: CancellationException) {\r\n                // Operation was cancelled, clean up\r\n                Log.d("Inventory", "Operation cancelled")\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Use weak references for callbacks:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class InventoryManager(context: Context) {\r\n    private val weakContext = WeakReference(context)\r\n    \r\n    fun loadItems(callback: (List<Item>) -> Unit) {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            val items = inventoryConnector.getItems() ?: emptyList()\r\n            weakContext.get()?.let { context ->\r\n                withContext(Dispatchers.Main) {\r\n                    callback(items)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var o=s(6540);const r={},t=o.createContext(r);function i(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);