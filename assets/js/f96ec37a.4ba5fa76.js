"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[5509],{811:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"common-issues/common-issues-debugging-tips","title":"Debugging Tips","description":"Logging, status checks, and diagnostics.","source":"@site/versioned_docs/version-0.1.5/common-issues/debugging-tips.md","sourceDirName":"common-issues","slug":"/common-issues/common-issues-debugging-tips","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/common-issues/common-issues-debugging-tips","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":4,"frontMatter":{"id":"common-issues-debugging-tips","sidebar_position":4,"title":"Debugging Tips","description":"Logging, status checks, and diagnostics.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Performance Issues","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/common-issues/common-issues-performance"},"next":{"title":"Memory Issues","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/common-issues/common-issues-memory"}}');var r=i(4848),t=i(8453);const o={id:"common-issues-debugging-tips",sidebar_position:4,title:"Debugging Tips",description:"Logging, status checks, and diagnostics.",hide_title:!0},c=void 0,a={},l=[{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"Threading",id:"threading",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Lifecycle Management",id:"lifecycle-management",level:3},{value:"Enable Debug Logging",id:"enable-debug-logging",level:3},{value:"Check Service Status",id:"check-service-status",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,r.jsx)(n.p,{children:"Practical tips to debug CorePOS integration: enable logging, check service status, and run network diagnostics."}),"\n",(0,r.jsxs)(n.admonition,{title:"Look at this first",type:"info",children:[(0,r.jsx)(n.h3,{id:"threading",children:"Threading"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"All SDK operations must be called from background threads"})}),"\n",(0,r.jsxs)(n.li,{children:["The SDK will throw ",(0,r.jsx)(n.code,{children:"IllegalStateException"})," if called from the main thread"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"lifecycleScope.launch(Dispatchers.IO)"})," for SDK operations"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always wrap SDK calls in try-catch blocks"}),"\n",(0,r.jsxs)(n.li,{children:["Handle specific exceptions: ",(0,r.jsx)(n.code,{children:"PermissionDeniedException"}),", ",(0,r.jsx)(n.code,{children:"BindingException"}),", ",(0,r.jsx)(n.code,{children:"IllegalArgumentException"})]}),"\n",(0,r.jsx)(n.li,{children:"Implement retry logic for transient errors"}),"\n"]}),(0,r.jsx)(n.h3,{id:"lifecycle-management",children:"Lifecycle Management"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store connectors as class properties"}),"\n",(0,r.jsxs)(n.li,{children:["Call ",(0,r.jsx)(n.code,{children:"disconnect()"})," when done to clean up resources"]}),"\n",(0,r.jsx)(n.li,{children:"Handle configuration changes properly"}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"enable-debug-logging",children:"Enable Debug Logging"}),"\n",(0,r.jsx)(n.p,{children:"Add debug logging to track SDK operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'object CorePOSDebug {\r\n    private const val TAG = "CorePOS"\r\n    private var isDebugEnabled = BuildConfig.DEBUG\r\n    \r\n    fun log(message: String) {\r\n        if (isDebugEnabled) {\r\n            Log.d(TAG, message)\r\n        }\r\n    }\r\n    \r\n    fun logError(message: String, throwable: Throwable? = null) {\r\n        if (isDebugEnabled) {\r\n            Log.e(TAG, message, throwable)\r\n        }\r\n    }\r\n    \r\n    fun enableDebug(enabled: Boolean) {\r\n        isDebugEnabled = enabled\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"check-service-status",children:"Check Service Status"}),"\n",(0,r.jsx)(n.p,{children:"Create a utility to check CorePOS service status:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"object CorePOSStatusChecker {\r\n    fun checkServiceStatus(context: Context): ServiceStatus {\r\n        return try {\r\n            // Try to get merchant info as a health check\r\n            val merchantConnector = MerchantConnector(context)\r\n            val merchant = merchantConnector.getMerchant()\r\n            if (merchant != null) {\r\n                ServiceStatus.Connected\r\n            } else {\r\n                ServiceStatus.NoData\r\n            }\r\n        } catch (e: BindingException) {\r\n            ServiceStatus.NotConnected\r\n        } catch (e: PermissionDeniedException) {\r\n            ServiceStatus.NoPermission\r\n        } catch (e: Exception) {\r\n            ServiceStatus.Unknown(e.message)\r\n        }\r\n    }\r\n}\r\n\r\nsealed class ServiceStatus {\r\n    object Connected : ServiceStatus()\r\n    object NotConnected : ServiceStatus()\r\n    object NoPermission : ServiceStatus()\r\n    object NoData : ServiceStatus()\r\n    data class Unknown(val message: String?) : ServiceStatus()\r\n}\n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);