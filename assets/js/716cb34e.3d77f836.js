"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[4342],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},9578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-get-items","title":"Get Items","description":"Retrieves a list of items.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/get-items.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-get-items","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-items","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":3,"frontMatter":{"id":"inventory-api-get-items","sidebar_position":3,"title":"Get Items","description":"Retrieves a list of items.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Get Item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-item"},"next":{"title":"Save item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-save-item"}}');var i=n(4848),s=n(8453);const o={id:"inventory-api-get-items",sidebar_position:3,title:"Get Items",description:"Retrieves a list of items.",hide_title:!0},l=void 0,a={},c=[{value:"Get Items",id:"get-items",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern::",id:"best-practice-with-repository-pattern",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"get-items",children:"Get Items"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Retrieves a list of inventory items with optional filtering. Fetch all items or a filtered subset from the inventory system."]}),"\n",(0,i.jsx)(t.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:"fun getItems(filter: ItemFilter? = null): List<Item>?\n"})}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"filter"})," (optional): ",(0,i.jsx)(t.a,{href:"../models/models-inventory#itemfilter",children:(0,i.jsx)(t.code,{children:"ItemFilter"})})," - Filter criteria to limit results"]}),"\n",(0,i.jsx)(t.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"List<Item>?"}),": A list of ",(0,i.jsx)(t.a,{href:"../models/models-inventory#item",children:(0,i.jsx)(t.code,{children:"Item"})})," matching the criteria, or ",(0,i.jsx)(t.code,{children:"null"})," if the operation fails."]}),"\n",(0,i.jsx)(t.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsxs)(t.p,{children:["Returns ",(0,i.jsx)(t.code,{children:"null"})," on error."]}),"\n",(0,i.jsx)(t.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'    private fun loadItems() {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            try {\r\n                // Get all items\r\n                val allItems = inventoryConnector.getItems()\r\n                \r\n                // Get filtered items by category\r\n                val filter = ItemFilter(categoryId = "electronics")\r\n                val filteredItems = inventoryConnector.getItems(filter)\r\n                \r\n                withContext(Dispatchers.Main) {\r\n                    updateItemList(allItems ?: emptyList())\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e("CorePOS", "Failed to load items: ${e.message}")\r\n            }\r\n        }\r\n    }\n'})}),"\n",(0,i.jsx)(t.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern::"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun getItems(filter: ItemFilter? = null): List<Item>?\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun getItems(filter: ItemFilter?): List<Item> {\r\n        return try {\r\n            inventoryConnector.getItems(filter) ?: emptyList()\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get items: ${e.message}")\r\n            emptyList()\r\n        }\r\n    }\r\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);