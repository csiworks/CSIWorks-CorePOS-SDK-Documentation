"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[2311],{3224:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-delete-category","title":"Delete Category","description":"Removes a category from the system.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/delete-category.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-delete-category","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-delete-category","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":12,"frontMatter":{"id":"inventory-api-delete-category","sidebar_position":12,"title":"Delete Category","description":"Removes a category from the system.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Save Category","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-save-category"},"next":{"title":"Update Item Stock Quantity","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-update-item-stock-quantity"}}');var o=t(4848),i=t(8453);const a={id:"inventory-api-delete-category",sidebar_position:12,title:"Delete Category",description:"Removes a category from the system.",hide_title:!0},s=void 0,c={},l=[{value:"Delete Category",id:"delete-category",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function d(e){const r={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"delete-category",children:"Delete Category"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Purpose:"})," Permanently delete a category by its ID."]}),"\n",(0,o.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-kotlin",children:"fun deleteCategory(categoryId: String)\n"})}),"\n",(0,o.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"categoryId"})," (String): Unique ",(0,o.jsx)(r.strong,{children:"UUID"})," identifier of the category to delete"]}),"\n",(0,o.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,o.jsx)(r.p,{children:"Void (Unit) No return value is provided. The operation is asynchronous, and a callback is triggered to indicate success or failure."}),"\n",(0,o.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,o.jsx)(r.p,{children:"Triggers error callback on failure."}),"\n",(0,o.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-kotlin",children:'private fun deleteCategory(categoryId: String) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        try {\r\n            inventoryConnector.deleteCategory(categoryId)\r\n            withContext(Dispatchers.Main) {\r\n                showCategoryDeleted()\r\n                refreshCategoriesList()\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to delete category: ${e.message}")\r\n            withContext(Dispatchers.Main) {\r\n                showDeleteError()\r\n            }\r\n        }   \r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun deleteCategory(categoryId: String): Boolean\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun deleteCategory(categoryId: String): Boolean {\r\n        return try {\r\n            inventoryConnector.deleteCategory(categoryId)\r\n            true\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to delete category: ${e.message}")\r\n            false\r\n        }\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>s});var n=t(6540);const o={},i=n.createContext(o);function a(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);