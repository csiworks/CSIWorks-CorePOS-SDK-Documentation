"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[6427],{6135:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-get-charges","title":"Get Charges","description":"Retrieves all available charges (taxes and fees).","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/get-charges.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-get-charges","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-charges","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":8,"frontMatter":{"id":"inventory-api-get-charges","sidebar_position":8,"title":"Get Charges","description":"Retrieves all available charges (taxes and fees).","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Update EBT Flags","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-update-ebt-flags"},"next":{"title":"Save Charge","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-save-charge"}}');var a=n(4848),s=n(8453);const i={id:"inventory-api-get-charges",sidebar_position:8,title:"Get Charges",description:"Retrieves all available charges (taxes and fees).",hide_title:!0},o=void 0,c={},l=[{value:"Get Charges",id:"get-charges",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function h(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"get-charges",children:"Get Charges"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Purpose:"})," Fetch the complete list of charges (taxes and fees) available in the system."]}),"\n",(0,a.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-kotlin",children:"fun getCharges(): List<Charge>?\n"})}),"\n",(0,a.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,a.jsx)(r.p,{children:"None"}),"\n",(0,a.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"List<Charge>?"}),": A list of ",(0,a.jsx)(r.a,{href:"../models/models-inventory#charge",children:(0,a.jsx)(r.code,{children:"Charge"})}),", or ",(0,a.jsx)(r.code,{children:"null"})," if the operation fails."]}),"\n",(0,a.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,a.jsxs)(r.p,{children:["Returns ",(0,a.jsx)(r.code,{children:"null"})," on error."]}),"\n",(0,a.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-kotlin",children:'private fun loadCharges() {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        try {\r\n            val charges = inventoryConnector.getCharges()\r\n            charges?.let {\r\n                withContext(Dispatchers.Main) {\r\n                    populateChargesList(it)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to load charges: ${e.message}")\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun getCharges(): List<Charge>?\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun getCharges(): List<Charge> {\r\n        return try {\r\n            inventoryConnector.getCharges() ?: emptyList()\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get charges: ${e.message}")\r\n            emptyList()\r\n        }\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(6540);const a={},s=t.createContext(a);function i(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);