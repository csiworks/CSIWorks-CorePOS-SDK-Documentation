"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[1945],{6214:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/inventory-connector/inventory-api-get-categories","title":"Get Categories","description":"Retrieves all available inventory categories.","source":"@site/versioned_docs/version-0.1.5/api-reference/inventory-connector/get-categories.md","sourceDirName":"api-reference/inventory-connector","slug":"/api-reference/inventory-connector/inventory-api-get-categories","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-get-categories","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":6,"frontMatter":{"id":"inventory-api-get-categories","sidebar_position":6,"title":"Get Categories","description":"Retrieves all available inventory categories.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Delete item","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-delete-item"},"next":{"title":"Update EBT Flags","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/inventory-connector/inventory-api-update-ebt-flags"}}');var i=n(4848),o=n(8453);const s={id:"inventory-api-get-categories",sidebar_position:6,title:"Get Categories",description:"Retrieves all available inventory categories.",hide_title:!0},a=void 0,c={},l=[{value:"Get Categories",id:"get-categories",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern::",id:"best-practice-with-repository-pattern",level:3}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"get-categories",children:"Get Categories"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Purpose:"})," Fetch the complete list of categories for organizing inventory items."]}),"\n",(0,i.jsx)(r.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"fun getCategories(): List<Category>?\n"})}),"\n",(0,i.jsx)(r.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsx)(r.p,{children:"None"}),"\n",(0,i.jsx)(r.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"List<Category>?"}),": A list of ",(0,i.jsx)(r.a,{href:"../models/models-inventory#category",children:(0,i.jsx)(r.code,{children:"Category"})}),", or ",(0,i.jsx)(r.code,{children:"null"})," if the operation fails."]}),"\n",(0,i.jsx)(r.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsxs)(r.p,{children:["Returns ",(0,i.jsx)(r.code,{children:"null"})," on error."]}),"\n",(0,i.jsx)(r.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'private fun loadCategories() {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        try {\r\n            val categories = inventoryConnector.getCategories()\r\n            categories?.let {\r\n                withContext(Dispatchers.Main) {\r\n                    populateCategorySpinner(it)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e("CorePOS", "Failed to load categories: ${e.message}")\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern::"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun getCategories(): List<Category>?\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val inventoryConnector: InventoryConnector\r\n) : InventoryRepository {\r\n    \r\n    override suspend fun getCategories(): List<Category> {\r\n        return try {\r\n            inventoryConnector.getCategories() ?: emptyList()\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get categories: ${e.message}")\r\n            emptyList()\r\n        }\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);