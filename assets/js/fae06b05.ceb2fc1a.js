"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[6486],{2124:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"best-practices/practices-error-handling","title":"Error Handling","description":"Centralized handling and retries.","source":"@site/versioned_docs/version-0.1.5/best-practices/error-handling.md","sourceDirName":"best-practices","slug":"/best-practices/practices-error-handling","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-error-handling","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":3,"frontMatter":{"id":"practices-error-handling","sidebar_position":3,"title":"Error Handling","description":"Centralized handling and retries.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Performance Optimization","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-performance-optimization"},"next":{"title":"Security Practices","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-security"}}');var i=n(4848),o=n(8453);const a={id:"practices-error-handling",sidebar_position:3,title:"Error Handling",description:"Centralized handling and retries.",hide_title:!0},s=void 0,c={},l=[{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:2},{value:"Centralized Error Handling",id:"centralized-error-handling",level:3},{value:"Retry Logic",id:"retry-logic",level:3}];function d(e){const r={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"error-handling-best-practices",children:"Error Handling Best Practices"}),"\n",(0,i.jsx)(r.p,{children:"Guidelines for managing errors: use centralized handling and implement robust retry logic."}),"\n",(0,i.jsx)(r.admonition,{title:"Important Notes",type:"caution",children:(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Always wrap SDK calls in try-catch blocks"}),"\n",(0,i.jsxs)(r.li,{children:["Handle specific exceptions: ",(0,i.jsx)(r.code,{children:"PermissionDeniedException"}),", ",(0,i.jsx)(r.code,{children:"BindingException"}),", ",(0,i.jsx)(r.code,{children:"IllegalArgumentException"})]}),"\n",(0,i.jsx)(r.li,{children:"Implement retry logic for transient errors"}),"\n"]})}),"\n",(0,i.jsx)(r.h3,{id:"centralized-error-handling",children:"Centralized Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"Create a centralized error handling system:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'sealed class CorePOSResult<out T> {\r\n    data class Success<T>(val data: T) : CorePOSResult<T>()\r\n    data class Error(val exception: Throwable) : CorePOSResult<Nothing>()\r\n}\r\n\r\nclass CorePOSErrorHandler {\r\n    companion object {\r\n        fun handleError(throwable: Throwable, context: Context) {\r\n            when (throwable) {\r\n                is PermissionDeniedException -> {\r\n                    showPermissionDialog(context)\r\n                }\r\n                is BindingException -> {\r\n                    showConnectionDialog(context)\r\n                }\r\n                is IllegalArgumentException -> {\r\n                    showValidationDialog(context, throwable.message)\r\n                }\r\n                else -> {\r\n                    Log.e("CorePOS", "Unexpected error: ${throwable.message}")\r\n                    showGenericError(context)\r\n                }\r\n            }\r\n        }\r\n        \r\n        private fun showPermissionDialog(context: Context) {\r\n            // Show permission request dialog\r\n        }\r\n        \r\n        private fun showConnectionDialog(context: Context) {\r\n            // Show connection error dialog\r\n        }\r\n        \r\n        private fun showValidationDialog(context: Context, message: String?) {\r\n            // Show validation error dialog\r\n        }\r\n        \r\n        private fun showGenericError(context: Context) {\r\n            // Show generic error dialog\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,i.jsx)(r.p,{children:"Implement robust retry logic:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'class RetryManager {\r\n    suspend fun <T> retry(\r\n        maxAttempts: Int = 3,\r\n        initialDelay: Long = 1000L,\r\n        maxDelay: Long = 10000L,\r\n        factor: Double = 2.0,\r\n        block: suspend () -> T\r\n    ): T {\r\n        var currentDelay = initialDelay\r\n        repeat(maxAttempts) { attempt ->\r\n            try {\r\n                return block()\r\n            } catch (e: Exception) {\r\n                if (attempt == maxAttempts - 1) throw e\r\n                \r\n                if (e is BindingException || e is PermissionDeniedException) {\r\n                    delay(currentDelay)\r\n                    currentDelay = (currentDelay * factor).toLong().coerceAtMost(maxDelay)\r\n                } else {\r\n                    throw e // Don\'t retry for non-transient errors\r\n                }\r\n            }\r\n        }\r\n        throw IllegalStateException("Retry exhausted")\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(6540);const i={},o=t.createContext(i);function a(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);