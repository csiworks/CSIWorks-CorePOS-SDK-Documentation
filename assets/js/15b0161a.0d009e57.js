"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[6776],{7390:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"best-practices/practices-architecture","title":"Architecture","description":"Repository, DI, ViewModels.","source":"@site/versioned_docs/version-0.1.5/best-practices/architecture_guidelines.md","sourceDirName":"best-practices","slug":"/best-practices/practices-architecture","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-architecture","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":1,"frontMatter":{"id":"practices-architecture","sidebar_position":1,"title":"Architecture","description":"Repository, DI, ViewModels.","pagination_prev":null,"hide_title":true},"sidebar":"tutorialSidebar","next":{"title":"Performance Optimization","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/best-practices/practices-performance-optimization"}}');var i=r(4848),o=r(8453);const s={id:"practices-architecture",sidebar_position:1,title:"Architecture",description:"Repository, DI, ViewModels.",pagination_prev:null,hide_title:!0},c=void 0,a={},l=[{value:"Architecture Guidelines",id:"architecture-guidelines",level:2},{value:"Use Repository Pattern",id:"use-repository-pattern",level:3},{value:"Implement Dependency Injection",id:"implement-dependency-injection",level:3},{value:"Use ViewModels for Business Logic",id:"use-viewmodels-for-business-logic",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"architecture-guidelines",children:"Architecture Guidelines"}),"\n",(0,i.jsx)(n.p,{children:"Essential architecture principles: use Repository pattern, apply Dependency Injection, and keep business logic in ViewModels."}),"\n",(0,i.jsx)(n.h3,{id:"use-repository-pattern",children:"Use Repository Pattern"}),"\n",(0,i.jsx)(n.p,{children:"Implement a repository pattern to abstract SDK operations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'interface InventoryRepository {\r\n    suspend fun getItems(filter: ItemFilter? = null): List<Item>\r\n    suspend fun getItem(itemId: String): Item?\r\n    suspend fun saveItem(item: Item, imageUri: String?): Item?\r\n    suspend fun deleteItem(itemId: String): Boolean\r\n    suspend fun getCategories(): List<Category>\r\n}\r\n\r\nclass InventoryRepositoryImpl(\r\n    private val context: Context\r\n) : InventoryRepository {\r\n    private val inventoryConnector = InventoryConnector(context)\r\n    \r\n    override suspend fun getItems(filter: ItemFilter?): List<Item> {\r\n        return try {\r\n            inventoryConnector.getItems(filter) ?: emptyList()\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get items: ${e.message}")\r\n            emptyList()\r\n        }\r\n    }\r\n    \r\n    override suspend fun getItem(itemId: String): Item? {\r\n        return try {\r\n            inventoryConnector.getItem(itemId)\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get item: ${e.message}")\r\n            null\r\n        }\r\n    }\r\n    \r\n    override suspend fun saveItem(item: Item, imageUri: String?): Item? {\r\n        return try {\r\n            inventoryConnector.saveItem(item, imageUri)\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to save item: ${e.message}")\r\n            null\r\n        }\r\n    }\r\n    \r\n    override suspend fun deleteItem(itemId: String): Boolean {\r\n        return try {\r\n            inventoryConnector.deleteItem(itemId)\r\n            true\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to delete item: ${e.message}")\r\n            false\r\n        }\r\n    }\r\n\r\n    override suspend fun getCategories(): List<Category> {\r\n        return try {\r\n            inventoryConnector.getCategories() ?: emptyList()\r\n        } catch (e: Exception) {\r\n            Log.e("InventoryRepo", "Failed to get categories: ${e.message}")\r\n            emptyList()\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implement-dependency-injection",children:"Implement Dependency Injection"}),"\n",(0,i.jsx)(n.p,{children:"Use dependency injection to manage SDK dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"@Module\r\n@InstallIn(SingletonComponent::class)\r\nobject CorePOSModule {\r\n    \r\n    @Provides\r\n    @Singleton\r\n    fun provideInventoryConnector(@ApplicationContext context: Context): InventoryConnector {\r\n        return InventoryConnector(context)\r\n    }\r\n    \r\n    @Provides\r\n    @Singleton\r\n    fun provideOrderConnector(@ApplicationContext context: Context): OrderConnector {\r\n        return OrderConnector(context)\r\n    }\r\n    \r\n    @Provides\r\n    @Singleton\r\n    fun provideMerchantConnector(@ApplicationContext context: Context): MerchantConnector {\r\n        return MerchantConnector(context)\r\n    }\r\n    \r\n    @Provides\r\n    @Singleton\r\n    fun provideInventoryRepository(\r\n        inventoryConnector: InventoryConnector\r\n    ): InventoryRepository {\r\n        return InventoryRepositoryImpl(inventoryConnector)\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"use-viewmodels-for-business-logic",children:"Use ViewModels for Business Logic"}),"\n",(0,i.jsx)(n.p,{children:"Keep business logic in ViewModels and use LiveData for reactive UI updates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class InventoryViewModel @Inject constructor(\r\n    private val inventoryRepository: InventoryRepository\r\n) : ViewModel() {\r\n    \r\n    private val _items = MutableLiveData<List<Item>>()\r\n    val items: LiveData<List<Item>> = _items\r\n    \r\n    private val _loading = MutableLiveData<Boolean>()\r\n    val loading: LiveData<Boolean> = _loading\r\n    \r\n    private val _error = MutableLiveData<String?>()\r\n    val error: LiveData<String?> = _error\r\n    \r\n    fun loadItems(filter: ItemFilter? = null) {\r\n        viewModelScope.launch {\r\n            _loading.value = true\r\n            _error.value = null\r\n            \r\n            try {\r\n                val items = inventoryRepository.getItems(filter)\r\n                _items.value = items\r\n            } catch (e: Exception) {\r\n                _error.value = e.message\r\n            } finally {\r\n                _loading.value = false\r\n            }\r\n        }\r\n    }\r\n    \r\n    fun createItem(name: String, price: Long, categoryId: String?) {\r\n        viewModelScope.launch {\r\n            try {\r\n                val item = Item(\r\n                    name = name,\r\n                    priceType = PriceType.FIXED.code,\r\n                    unitCash = price,\r\n                    unitCard = price,\r\n                    unitType = "piece",\r\n                    charges = emptyList(),\r\n                    categories = categoryId?.let { listOf(Category(it, null)) },\r\n                    productCode = null,\r\n                    itemCost = null,\r\n                    quantity = 0,\r\n                    trackInventory = false,\r\n                    dualPricingBasePriceType = PriceType.FIXED.code,\r\n                    isEBT = false,\r\n                    isAvailable = true\r\n                )\r\n                \r\n                val savedItem = inventoryRepository.saveItem(item, null)\r\n                if (savedItem != null) {\r\n                    loadItems() // Refresh the list\r\n                }\r\n            } catch (e: Exception) {\r\n                _error.value = e.message\r\n            }\r\n        }\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);