"use strict";(self.webpackChunkcore_pos_sdk=self.webpackChunkcore_pos_sdk||[]).push([[2355],{3153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-reference/order-connector/order-api-update-line-items","title":"Update Line Items","description":"Update multiple line items in an order with a single operation.","source":"@site/versioned_docs/version-0.1.5/api-reference/order-connector/update-line-items.md","sourceDirName":"api-reference/order-connector","slug":"/api-reference/order-connector/order-api-update-line-items","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-update-line-items","draft":false,"unlisted":false,"tags":[],"version":"0.1.5","sidebarPosition":9,"frontMatter":{"id":"order-api-update-line-items","sidebar_position":9,"title":"Update Line Items","description":"Update multiple line items in an order with a single operation.","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Delete Line Item Discounts","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/api-reference/order-connector/order-api-delete-line-item-discounts"},"next":{"title":"TenderConnector","permalink":"/CSIWorks-CorePOS-SDK-Documentation/0.1.5/tender-connector"}}');var i=t(4848),s=t(8453);const o={id:"order-api-update-line-items",sidebar_position:9,title:"Update Line Items",description:"Update multiple line items in an order with a single operation.",hide_title:!0},d=void 0,a={},l=[{value:"Update Line Items",id:"update-line-items",level:2},{value:"Signature:",id:"signature",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Error Handling:",id:"error-handling",level:4},{value:"Example Usage:",id:"example-usage",level:3},{value:"Best Practice with Repository Pattern:",id:"best-practice-with-repository-pattern",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"update-line-items",children:"Update Line Items"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update multiple line items in an order with a single operation."]}),"\n",(0,i.jsx)(n.h3,{id:"signature",children:"Signature:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun updateLineItems(orderId: String, lineItems: List<LineItem>): List<LineItem>?\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"orderId"})," (String): Unique ",(0,i.jsx)(n.strong,{children:"UUID"})," identifier of the ",(0,i.jsx)(n.a,{href:"../models/models-order#order",children:(0,i.jsx)(n.code,{children:"Order"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lineItems"})," (List(LineItem)): List of ",(0,i.jsx)(n.a,{href:"../models/models-order#lineitem",children:(0,i.jsx)(n.code,{children:"LineItem"})})," objects to update."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"List<LineItem>?"})," - Returns the list of updated line items if successful, or null if the operation fails."]}),"\n",(0,i.jsx)(n.h4,{id:"error-handling",children:"Error Handling:"}),"\n",(0,i.jsx)(n.p,{children:"Returns null on failure."}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"private fun bulkUpdateQuantities(orderId: String, lineItems: List<LineItem>, quantityUpdates: Map<String, Double>) {\r\n    lifecycleScope.launch(Dispatchers.IO) {\r\n        val updatedLineItems = lineItems.map { lineItem ->\r\n            quantityUpdates[lineItem.id]?.let { newQuantity ->\r\n                lineItem.copy(quantity = newQuantity)\r\n            } ?: lineItem\r\n        }\r\n        val result = orderConnector.updateLineItems(orderId, updatedLineItems)\r\n        withContext(Dispatchers.Main) {\r\n            result?.let { updateOrderUI(it) }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"best-practice-with-repository-pattern",children:"Best Practice with Repository Pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"interface OrderRepository {\r\n    suspend fun updateLineItems(orderId: String, lineItems: List<LineItem>): List<LineItem>?\r\n}\r\n\r\nclass OrderRepositoryImpl(\r\n    private val orderConnector: OrderConnector\r\n) : OrderRepository {\r\n    override suspend fun updateLineItems(orderId: String, lineItems: List<LineItem>): List<LineItem>? {\r\n        return try {\r\n            orderConnector.updateLineItems(orderId, lineItems)\r\n        } catch (_: Exception) { null }\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);